'use strict';

angular.module('BOMViewer')
    .controller('CustomUserSetting', CustomUserSetting)
    .controller('CustomUserSettingColorBox', CustomUserSettingColorBox);

CustomUserSetting.$inject = ['$scope', '$location', '$http'];
CustomUserSettingColorBox.$inject = ['$scope', '$location', '$localStorage', '$http', 'User', 'localstorage'];


function CustomUserSetting($scope, $location, $http) {
    /*
    // Widget Bouton
    $scope.applyButtonOptions = {
        text: "Sauvegarder",
        type: "success",
        width: 150,       
        onClick: function (e) {
        }
    };

    $scope.cancelButtonOptions = {
        text: "Annuler",
        type: "danger",
        width: 100,        
        onClick: function (e) {           
        }
    };*/
}


// COLOR BOX \\        
function CustomUserSettingColorBox($scope, $location, $localStorage, $http, User, localstorage) {


    $scope.$storage = $localStorage.$default({
        bool: false
    });
    console.log($scope.$storage.bool);

    $scope.bool = false;

    var applyButton = "Valider";
    var cancelButton = "Annuler";



    $http({
        url: 'Api/GetUserColorSetting',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        $scope.result = response.data;        
        var colorList = $scope.result;
        //console.log($scope.result);
        
        $scope.ColorValue = {
            Commande: colorList[0].Color,
            Ligne: colorList[1].Color,
            Pere: colorList[2].Color,
            Fils: colorList[3].Color,
            Virtuelle: colorList[4].Color,
            Usinage: colorList[5].Color,
            EtapeUsi: colorList[6].Color,
            MatiereGen: colorList[7].Color,
            IPM: colorList[8].Color,
            Fabrication: colorList[9].Color,
            GammeOpe: colorList[10].Color,
            PDC: colorList[11].Color,
            InfosProcPDC: colorList[12].Color,
            LigneColis: colorList[13].Color,
        };

        $scope.colorBox = {
            Commande: {
                bindingOptions: {
                    value: 'ColorValue.Commande'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Commande",
                lib: "Commande"
            },
            Ligne: {
                bindingOptions: {
                    value: 'ColorValue.Ligne'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "N° de Ligne",
                lib: "Ligne"
            },
            Pere: {
                bindingOptions: {
                    value: 'ColorValue.Pere'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Père (P)",
                lib: "Pere"
            },
            Fils: {
                bindingOptions: {
                    value: 'ColorValue.Fils'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Nomenclature Fils (N)",
                lib: "Fils"
            },
            Virtuelle: {
                bindingOptions: {
                    value: 'ColorValue.Virtuelle'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Virtuelle (V)",
                lib: "Virtuelle"
            },
            Usinage: {
                bindingOptions: {
                    value: 'ColorValue.Usinage'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Usinage (U)",
                lib: "Usinage"
            },
            EtapeUsi: {
                bindingOptions: {
                    value: 'ColorValue.EtapeUsi'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Etape Usinage (S)",
                lib: "EtapeUsi"
            },
            MatiereGen: {
                bindingOptions: {
                    value: 'ColorValue.MatiereGen'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Matière générée (G)",
                lib: "MatiereGen"
            },
            IPM: {
                bindingOptions: {
                    value: 'ColorValue.IPM'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Infos Processus Matière (I)",
                lib: "IPM"
            },
            Fabrication: {
                bindingOptions: {
                    value: 'ColorValue.Fabrication'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Fabrication (F)",
                lib: "Fabrication"
            },
            GammeOpe: {
                bindingOptions: {
                    value: 'ColorValue.GammeOpe'
                },          
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Gamme d'opération (O)",
                lib: "GammeOpe"
            },
            PDC: {
                bindingOptions: {
                    value: 'ColorValue.PDC'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Poste De Charge (W)",
                lib: "PDC"
            },
            InfosProcPDC: {
                bindingOptions: {
                    value: 'ColorValue.InfosProcPDC'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Infos Processus PDC (Ip)",
                lib: "InfosProcPDC"
            },
            LigneColis: {
                bindingOptions: {
                    value: 'ColorValue.LigneColis'
                },
                applyValueMode: 'instantly',
                applyButtonText: applyButton,
                cancelButtonText: cancelButton,
                editAlphaChannel: $scope.$storage.bool,
                text: "Ligne colis (L)",
                lib: "LigneColis"
            }
        };

        localstorage.setObject("colorValue", $scope.ColorValue);

        // To keep data of the original value in case of the user want to cancel his changes
        $scope.colorValueOriginal = 'C=' + $scope.ColorValue.Commande + ';A=' + $scope.ColorValue.Ligne + ';P=' + $scope.ColorValue.Pere + ';N=' + $scope.ColorValue.Fils + ';V='
            + $scope.ColorValue.Virtuelle + ';U=' + $scope.ColorValue.Usinage + ';S=' + $scope.ColorValue.EtapeUsi + ';G=' + $scope.ColorValue.MatiereGen + ';I=' + $scope.ColorValue.IPM + ';F=' + $scope.ColorValue.Fabrication
            + ';O=' + $scope.ColorValue.GammeOpe + ';W=' + $scope.ColorValue.PDC + ';Ip=' + $scope.ColorValue.InfosProcPDC + ';L=' + $scope.ColorValue.LigneColis;

    }), function (response) {
        console.log(response);
        alert(reponse);
        };
   

    
    var tmp; // For checkbox text
    if ($scope.$storage.bool) {
        tmp = "désactiver";
    } else tmp = "activer";
    

    
    // To enable "editAlphaChannel" for colorBox
    $scope.checkBox = {
        forAlphaChannel: {
            bindingOptions: {
                value: $scope.$storage.bool
            },
            text: "Cliquer pour " + tmp + " la transparence",
            value: $scope.$storage.bool
        }
    };


    $scope.reload = function ($location) {
        $scope.$storage.bool = !$scope.$storage.bool;
        console.log($scope.$storage.bool);
        location.replace('Custom/UserSetting');
    };



    // Widget Bouton apply
    $scope.applyButton = {
        text: "Sauvegarder",
        type: "success",
        width: 150,
        onClick: function (e) { 
            var colorObj = localstorage.getObject("colorValue", "colorValue erreur");
            console.log(colorObj);
            var colorList = 'C=' + $scope.ColorValue.Commande + ';A=' + $scope.ColorValue.Ligne + ';P=' + $scope.ColorValue.Pere + ';N=' + $scope.ColorValue.Fils + ';V='
                + $scope.ColorValue.Virtuelle + ';U=' + $scope.ColorValue.Usinage + ';S=' + $scope.ColorValue.EtapeUsi + ';G=' + $scope.ColorValue.MatiereGen + ';I=' + $scope.ColorValue.IPM + ';F=' + $scope.ColorValue.Fabrication
                + ';O=' + $scope.ColorValue.GammeOpe + ';W=' + $scope.ColorValue.PDC + ';Ip=' + $scope.ColorValue.InfosProcPDC + ';L=' + $scope.ColorValue.LigneColis

            User.setColor(User.getID_User(), $scope.colorValueList);                    
        }
    };

    // Widget Bouton cancel
    $scope.cancelButton = {
        text: "Annuler",
        type: "danger",
        width: 100,
        onClick: function (e) {
            User.setColor(User.getID_User(), $scope.colorValueOriginal)           
        }
    };

}
