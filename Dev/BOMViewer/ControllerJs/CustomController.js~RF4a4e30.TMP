'use strict';

angular.module('BOMViewer')
    .controller('customVisualisation', customVisualisation)
    .controller('customVisualisationField', customVisualisationField)
    .controller('customVisualisationLine', customVisualisationLine)    

// Injection des dépendances des contrôleurs
customVisualisation.$inject = ['$scope', '$location', '$http', '$window', 'ViewSetting', 'User'];
customVisualisationField.$inject = ['$scope', '$http', 'ViewSetting'];
customVisualisationLine.$inject = ['$scope', '$http', 'User'];


function customVisualisation($scope, $location, $http, $window, ViewSetting, User) {    
    // Accordion
    $scope.animationDuration = 300;
    $scope.collapsible = true;
    $scope.multiple = true;
    $scope.selectedItems = false; // No one will be expanded by default
    $scope.toDisplayForView = false; // Wait to click on a view to display options


    // Widget de l'accordéon
    $scope.accordionOptions = {
        dataSource: accordionItems,
        itemTemplate: "options",
        bindingOptions: {
            animationDuration: "animationDuration",
            collapsible: "collapsible",
            multiple: "multiple",
            selectedItems: "selectedItems"
        }
    };

    // Widget Bouton
    $scope.applyButtonOptions = {
        text: "Sauvegarder",
        type: "success",
        width: 150,
        bindingOptions: {
            disabled: '!toDisplayForView'
        },        
        onClick: function (e) {
            console.log(ViewSetting.getIdTypeLine());
            //To modifidy preference of the selected View
            $http({
                url: 'Api/UpdatePreferenceColumnOfView',
                method: 'GET',
                params: {
                    idView: $scope.IdViewSelected,
                    idSubLevel: ViewSetting.getIdTypeLine(),
                    listePrincipale: ViewSetting.getListeP(),
                    listeSecondaire: ViewSetting.getListeS()
                }
            }).then(function (response) {
                console.log(response.data);
                console.log(response);
                if (response.data === "True") {
                    DevExpress.ui.notify("Configuration sauvegardée !");

                }
                else {
                    DevExpress.ui.notify("Erreur dans la sauvegarde de la configuration ! Veuillez réessayez plus tard...");
                }
                    

            }), function (response) {
                console.log(response);
                alert(reponse);
                DevExpress.ui.error("Erreur dans la sauvegarde de la configuration ! Veuillez réessayez plus tard...");
            };
        }
    };
    
    $scope.cancelButtonOptions = {
        text: "Annuler",
        type: "danger",
        width: 100,
        bindingOptions: {
            disabled: '!toDisplayForView'
        },      
        onClick: function (e) {
            // On update les préférences avec celle de base lors du chargement de la vue
            $http({ 
                url: 'Api/UpdatePreferenceOfViewAll',
                method: 'GET',
                params: {
                    idView: $scope.IdViewSelected,
                    listePrincipale: ViewSetting.getListeDefaultP(),
                    listeSecondaire: ViewSetting.getListeDefaultS()
                }
            }).then(function (response) {
                console.log(response.data);
                console.log(response);
                if (response.data === "True") {
                    DevExpress.ui.notify("Modifications annulées!");     

                    $scope.selectedItemsPrincipal = ViewSetting.getListeDefaultP();
                    $scope.selectedItemsDetail = ViewSetting.getListeDefaultS();
                    ViewSetting.setListeP($scope.selectedItemsPrincipal);
                    ViewSetting.setListeS($scope.selectedItemsDetail);             
                }
                else
                    DevExpress.ui.notify("Erreur dans l'annulation des modifications ! Veuillez réessayez plus tard...");

            }), function (response) {
                console.log(response);
                alert(reponse);
                DevExpress.ui.error("Erreur dans l'annulation des modifications ! Veuillez réessayez plus tard...");
            };
        }
    };



    // Affiche la liste des Views 
    $http({
        url: 'Api/GetViewList',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        $scope.result = response.data;
        //console.log($scope.result);

        $scope.listOfView = {
            items: $scope.result,
            showPopupTitle: false,
            closeOnOutsideClick: true,
            placeholder: "Sélectionner une vue",
            displayExpr: "ViewName",
            onItemClick: function (e) {
                console.log(e.itemData);
                $scope.toDisplayForView = true;
                $scope.ViewName = e.itemData.ViewName;
                $scope.ViewDesc = e.itemData.ViewDesc;
                $scope.IdViewSelected = e.itemData.ID_View;
            }
        };
        
    }), function (response) {
        console.log(response);
        alert(reponse);
    };

}

// COLUMNS LIST \\
function customVisualisationField($scope, $http, ViewSetting) {

    //TODO  :: Rafraîchir les données de la liste des types de lignes  + liste détail/arbo lorsque la sélection d'une des listes ( ligne ou table ) est changé...
    
    var firstTime = true;
    $scope.listOptionsPrincipaleInstance = null;
    $scope.listOptionsDetailInstance = null;

    $scope.selectAllMode = "allPages";
    $scope.selectionMode = "multiple";


    // Une fois une vue sélectionnée, on charge tous ses paramètres de départ dans le cas où l'utilisateur annule ses changements, on pourra revenir en arrière grâce à ce charegement
    GetPreferenceColumnOfViewAll();


    // Affiche la liste des tables 
    $http({
        url: 'Api/GetTableList',
        method: 'GET'
    }).then(function (response) {
        $scope.resultTable = response.data;

        // List of Table
        $scope.lookupOptionsTable = {
            dataSource: $scope.resultTable,
            showPopupTitle: false,
            closeOnOutsideClick: true,
            placeholder: "Sélectionner une table",
            displayExpr: "TableName",
            onValueChanged: function (e) {
                $scope.SystemName = e.value.SystemName;
                $scope.LibraryName = e.value.LibraryName;
                $scope.TableName = e.value.TableName;

                $http({
                    url: 'Api/GetTypeLineOfTable',
                    method: 'GET',
                    params: {
                        tableName: $scope.TableName
                    }
                }).then(function (response) {
                    $scope.resultTypeLine = response.data;
                    console.log($scope.resultTypeLine);

                    // Widget for the List of Line type
                    $scope.lookupOptionsLine = {
                        //dataSource: $scope.resultTypeLine,
                        bindingOptions: {
                            dataSource: "resultTypeLine"
                        },
                        showPopupTitle: false,
                        closeOnOutsideClick: true,
                        placeholder: "Sélectionner un type de ligne",
                        displayExpr: "TableSubLevelType",
                        onValueChanged: function (e) {
                            $scope.idLineType = e.value.ID_TableSubLevel;
                            ViewSetting.setIdTypeLine($scope.idLineType);
                            GetPrimaryList();
                            console.log($scope.previousIdSubLevel);

                            if (!firstTime) {
                                $scope.previousIdSubLevel = e.previousValue.ID_TableSubLevel;
                                UpdatePreferenceColumnOfView(); // Nécessaire d'enregistrer car les listes dépendent du type de ligne sélectionné
                            }
                            else { // Dans un 1er temps, on recoit juste les pref., sinon dans un 2ième on update d'abord, puis on recoit les pref. (GetPreference imbriqué dans UpdatePref)
                                GetPreferenceColumnOfView();                                                       
                            }
                            $scope.toDisplay = true;
                            firstTime = false;


                            // Widget contenant la liste des paramètres pour la zone d'arboresence
                            // TODO :: Mettre en avant les champs sélectionner dans la liste
                            $scope.listOptionsPrincipale = {
                                height: 650,
                                keyExpr: "key",
                                bindingOptions: {
                                    selectionMode: "selectionMode",
                                    selectAllMode: "selectAllMode",
                                    dataSource: "primaryList",
                                    selectedItemKeys: "selectedItemsPrincipal"
                                },
                                allowItemReordering: true,
                                showSelectionControls: true,
                                searchEnabled: true,
                                searchMode: "contains",
                                searchExpr: ['ColumnName', 'ColumnDesc'],
                                onContentReady: function (e) { 
                                    $scope.listOptionsPrincipaleInstance = e.component;
                                },
                                onItemClick: function (item) {
                                    ViewSetting.setListeP($scope.selectedItemsPrincipal);
                                },
                                onItemReordered: function (e) {
                                    // Besoin de le re-seléctionner une fois bouger car sinon la liste ne prend pas en compte sa position
                                    if ($scope.listOptionsPrincipaleInstance.isItemSelected(e.toIndex)) {
                                        $scope.listOptionsPrincipaleInstance.unselectItem(e.toIndex);
                                        $scope.listOptionsPrincipaleInstance.selectItem(e.toIndex);
                                    }
                                    ViewSetting.setListeP($scope.selectedItemsPrincipal);
                                    $scope.listOptionsPrincipaleInstance.repaint();
                                }
                            };

                            // Widget contenant la liste des paramètres pour la zone de détail
                            $scope.listOptionsSecondaire = {
                                height: 650,
                                keyExpr: "key",
                                bindingOptions: {
                                    selectionMode: "selectionMode",
                                    selectAllMode: "selectAllMode",
                                    dataSource: "primaryList",
                                    selectedItemKeys: "selectedItemsDetail"
                                },
                                allowItemReordering: true,
                                showSelectionControls: true,
                                searchEnabled: true,
                                searchMode: "contains",
                                searchExpr: ['ColumnName', 'ColumnDesc'],
                                onContentReady: function (e) { // Met au début de la liste tous les champs sélectionnés de base
                                    $scope.listOptionsDetailInstance = e.component;
                                },
                                onItemClick: function (item) {
                                    ViewSetting.setListeS($scope.selectedItemsDetail);
                                },
                                onItemReordered: function (e) {
                                    if ($scope.listOptionsDetailInstance.isItemSelected(e.toIndex)) {
                                        $scope.listOptionsDetailInstance.unselectItem(e.toIndex);
                                        $scope.listOptionsDetailInstance.selectItem(e.toIndex);
                                    }
                                    ViewSetting.setListeS($scope.selectedItemsDetail);
                                    $scope.listOptionsDetailInstance.repaint();
                                }
                            };
                        }
                    };
                }), function (response) {
                    console.log(response);
                    alert(reponse);
                };
            }
        };

    }), function (response) {
        console.log(response);
        alert(reponse);
    };




    function GetPrimaryList() {
        $http({
            url: 'Api/GetPrimaryListOptions',
            method: 'GET',
            params: {
                system: $scope.SystemName,
                library: $scope.LibraryName,
                table: $scope.TableName,
                line: $scope.idLineType
            }
        }).then(function (response) {
            $scope.primaryList = response.data;

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    // Cette fonction prend les enregistrements concernant la vue en fonction du type de ligne sélectionné
    function GetPreferenceColumnOfView() {
        $http({
            url: 'Api/GetPreferenceColumnOfView',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                idSubLevel: $scope.idLineType
            }
        }).then(function (response) {
            var listeP = [];
            var listeS = [];
            var i = 0;
            while (i !== response.data.length) {
                if (response.data[i].DetailLevel === 0) {
                    listeP.push(response.data[i].key); // KEY = ID_Column + _ + ID_TableSubLevel
                }
                else {
                    listeS.push(response.data[i].key);
                }
                i++;
            }

            // Permet de créer une liste identifiant la colonne pour le type de ligne à pré-cocher lors de l'affichage des choix de zone de la vue
            $scope.selectedItemsPrincipal = listeP;
            $scope.selectedItemsDetail = listeS;
            ViewSetting.setListeP($scope.selectedItemsPrincipal);
            ViewSetting.setListeS($scope.selectedItemsDetail);
            console.log($scope.selectedItemsPrincipal);
            console.log($scope.selectedItemsDetail);

        }), function (response) {
            console.log(response);
        };
    }

    // Cette fonction prend tous les enregistrements concernant la vue pour une éventuelle remise à 0 (annulation des changements)
    function GetPreferenceColumnOfViewAll() {
        $http({
            url: 'Api/GetPreferenceColumnOfViewAll',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected
            }
        }).then(function (response) {
            var listeP = [];
            var listeS = [];
            var i = 0;
            while (i !== response.data.length) {
                if (response.data[i].DetailLevel === 0) {
                    listeP.push(response.data[i].key); // KEY = ID_Column + _ + ID_TableSubLevel
                }

                else {
                    listeS.push(response.data[i].key);
                }
                i++;
            }            
            ViewSetting.setListeDefaultP(listeP);
            ViewSetting.setListeDefaultS(listeS);
            //console.log(ViewSetting.getListeDefaultP());
            //console.log(ViewSetting.getListeDefaultS());
        }), function (response) {
            console.log(response);
        };
    }

    function UpdatePreferenceColumnOfView() {
        //console.log(ViewSetting.getListeP());
        //console.log(ViewSetting.getListeS());

        $http({
            url: 'Api/UpdatePreferenceColumnOfView',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                idSubLevel: $scope.previousIdSubLevel,
                listePrincipale: ViewSetting.getListeP(),
                listeSecondaire: ViewSetting.getListeS()
            }
        }).then(function (response) {
            console.log(response.data);
            console.log($scope.previousIdSubLevel);

            // On appelle cette fonction car il faut d'abord enregistrer les pref., puis les recevoir car si on enchaîne les deux dans la requête HTTP, Angularjs traitera le GetPreferenceOfView avant de sauvegarder (Update)
            GetPreferenceColumnOfView();

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    function UpdatePreferenceColumnOfViewAll() {
       //console.log(ViewSetting.getListeP());
       //console.log(ViewSetting.getListeS());

        $http({
            url: 'Api/UpdatePreferenceColumnOfViewAll',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                listePrincipale: ViewSetting.getListeP(),
                listeSecondaire: ViewSetting.getListeS()
            }
        }).then(function (response) {
            console.log(response.data);

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }
}

// Type LINE FILTER \\ TODO
function customVisualisationLine($scope, $http, User) {

    GetPreferenceLineOfView();




    // Charge la liste des types de lignes de toutes les tables
    $http({
        url: 'Api/GetTableSubLevels',
        method: 'GET'
    }).then(function (response) {
        $scope.resultLine = response.data;
        console.log($scope.resultLine);
        var dataSourceGrouped = new DevExpress.data.DataSource({
            store: $scope.resultLine,
            map: function (itemData) {
                return {
                    key: itemData.TableName,
                    items: {
                        ID_TableSubLevel: itemData.ID_TableSubLevel,
                        TableSubLevelType: itemData.TableSubLevelType,
                        TableSubLevelDesc: itemData.TableSubLevelDesc
                    }
                }
            });
        dataSourceGrouped.group("TableName");

        console.log(dataSourceGrouped);


 
        // WIDGET List of Line to displayed in treeview
        $scope.listOptionsLine = {
            height: 650,            
            dataSource: dataSourceGrouped,
            /*bindingOptions: {                
                selectedItemKeys: 'resultLinePreference'
            },
            showSelectionControls: true,
            searchEnabled: true,
            searchMode: "contains",
            searchExpr: ['TableName', 'TableSubLevelType'],*/
            selectionMode: "multiple",
            selectAllMode: "allPage",            
            grouped: true,
            collapsibleGroups: true,

            groupTemplate: function (data) {
                console.log(data);
                console.log(data.items);
                return $("<div>Table: " + data.items.TableName + "</div>");
            },
            onContentReady: function (e) {
                $scope.listLineInstance = e.component;
            },
            onItemClick: function (item) {
                console.log(item);
                console.log(item.itemElement);
            }
        };

    }), function (response) {
        console.log(response);
        alert("Erreur lors du chargement de la liste des types de lignes...");
        };





    function GetPreferenceLineOfView() {
        $http({
            url: 'Api/GetPreferenceLineOfView',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected                
            }
        }).then(function (response) {
            $scope.resultLinePreference = response.data;
            console.log($scope.resultLinePreference);

        }), function (response) {
            console.log(response);
        };
    }
}

