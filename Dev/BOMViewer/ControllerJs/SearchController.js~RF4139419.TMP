'use strict';

angular.module('BOMViewer')
    .controller('searchRecherche', searchRecherche)
    .controller('searchTreeView', searchTreeView);

// Injection des dépendances des contrôleurs
searchRecherche.$inject = ['$scope', '$http', '$window', '$timeout', '$q', 'localstorage', 'User', 'Order'];
searchTreeView.$inject = ['$scope', '$http', '$window', '$location', 'localstorage', 'User', 'Order'];



// FORM \\
function searchRecherche($scope, $http, $window, $timeout, $q, localstorage, User, Order) {

    var Agency = [
        { id: '1', age: '   ', libelle: 'FRA' },
        { id: '2', age: '100', libelle: 'ALL' },
        { id: '3', age: '200', libelle: 'ANG' }];

    var Library = [        
        { id: '1', lib: 'HISTOTEC', libelle: 'Historique (20 j) ' },
        { id: '2', lib: 'DCEXPLF', libelle: 'Dernier traitement' }];

    //RAJOUTER POUR SELETIONNER LA LIB USER AS400
    /*{ id: '3', Lib: '' }];    
$scope.textBoxTable = {
    bindingOptions: {
        value: "interactiveUserTable"
    },
    showClearButton: true,
    placeholder: "Décomposistion interactive"
}
*/

    $scope.orderData = {
        idOrder: 0,
        orderNumber: 0,
        library: '',
        agency: '',
        agencyText: '',
        line: 0,
        version: 0
    }

    var search = {
        orderNumber: null,
        line: null,
        agency: Agency[0],
        library: Library[0]
    }

    $scope.disableButton = true;


    // WIDGET TOP 10 des commandes importées
    $http({
        url: 'Api/GetTop10ImportedOrder',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        $scope.resultTable = response.data;
        //console.log($scope.resultTable);

        // WIDGET Pie chart
        $scope.chartOptions = {
            type: "doughnut",
            palette: "DarkMoon",
            dataSource: $scope.resultTable,
            title: "TOP 10 des commandes importées",
            tooltip: {
                enabled: true,

            },
            legend: {
                horizontalAlignment: "right",
                verticalAlignment: "bottom",
                margin: 0
            },
            export: {
                enabled: true,
                fileName: 'TOP10Order'
            },
            series: [{
                argumentField: "OrderNumber",
                valueField: "MaxVersion",
                label: {
                    visible: true,
                    connector: {
                        visible: true
                    }
                }
            }],
            onTooltipShown: function (e) {
                //console.log(e);
            }
        };
    }), function (response) {
        console.log(response);
        alert(reponse);
    };  


    // WIDGET Pop-Up
    $scope.popupOptions = {
        bindingOptions: {
            visible: "popup",
            title: "titleForPopUp"
        },
        width: 500,
        height: 300,
        showTitle: true,
        closeOnOutsideClick: function (e) {
            $(function () {
                $(".dx-progressbar-range").removeClass("error");               
                $(".dx-progressbar-range").addClass("loading");               
            });                        
        }
    };

    // WIDGET Pop-Up
    $scope.popupOrderNotComplete = {
        bindingOptions: {
            visible: "popupOrderNotCompleteVisible"            
        },
        title: "Avertissement !",
        width: 500,
        height: 300,
        showTitle: true
    };



    // WIDGET Bar-progress
    $scope.progressBarOptions = {
        min: 0,
        max: 100,
        width: "100%",
        bindingOptions: {
            value: "progressBarValue"
        },
        statusFormat: function (value) {
            return "Chargement: " + Math.round(value * 100) + "%";
        },
        onContentReady: function (e) {
            //console.log(e);
            e.element.removeClass("error");
            e.element.addClass("loading");
            $scope.withoutOrderMsg = "Importation de la commande terminée !";
        },
        onComplete: function (e) {
            e.element.removeClass("loading");
            $scope.withoutOrderMsg = "Importation de la commande terminée !";
            clearInterval($scope.stopProgressBar);
        }
    };

    function updateProgressBar() {
        $scope.progressBarValue += 5;
        $scope.$apply();
    }

    // WIDGET Button Cancel Import in Pop-up
    $scope.cancelButton = {
        text: 'Annuler',
        type: 'danger',
        width: 200,
        onClick: function (e) {
            clearInterval($scope.stopProgressBar);
            $scope.withoutOrderMsg = "Importation de la commande annulée !";

            $(function () {
                $(".dx-progressbar").removeClass("loading");
                $(".dx-progressbar").addClass("error");
            });

            $scope.canceler.resolve();
            DevExpress.ui.notify('Annulation de l\'importation de la commande [' + searchData.orderNumber + ']', "info", 1000);
        }
    };










    $http({
        url: 'Api/GetLastOrderDisplayed',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        $scope.lastOrderView = response.data[0];
        //console.log($scope.lastOrderView);
        
        for (var i = 0; i < Agency.length; i++) {            
            if ($scope.lastOrderView.OrderAgence === Agency[i].libelle) {
                $scope.lastOrderView.OrderAgence = Agency[i];
                //console.log(Agency[i].Lib);                    
            }
        }
       
        if ($scope.lastOrderView.OrderLine != '' && $scope.lastOrderView.OrderLine != undefined && $scope.lastOrderView.OrderLine != null)
            $scope.lastOrderViewId = $scope.lastOrderView.OrderNumber + ' - ' + $scope.lastOrderView.OrderAgence.libelle + ' (' + $scope.lastOrderView.OrderLine + ')';
        else
            $scope.lastOrderViewId = $scope.lastOrderView.OrderNumber + ' - ' + $scope.lastOrderView.OrderAgence.libelle;

    });


    $scope.updateLastOrderDisplay = function (searchData) {
        var lines = searchData.line;
        var strLine;
        for (var i = 0; i < lines.length; i++) {
            strLine += lines[i].CDLG$D + ',';
        }

        $http({
            url: 'Api/UpdateLastOrderDisplayed',
            method: 'GET',
            params: {
                ID_User: User.getID_User(),
                OrderNumber: searchData.orderNumber,
                agence: searchData.agencyTxt,
                OrderLine: strLine
            }
        }).then(function (response) {
            //console.log(response.data);
            $scope.lastOrderView = {
                OrderNumber: searchData.orderNumber,
                OrderAgence: searchData.agencyTxt,
                OrderLine: strLine
            }

            console.log($scope.lastOrderView.OrderLine);
            if ($scope.lastOrderView.OrderLine != '' && $scope.lastOrderView.OrderLine != undefined && $scope.lastOrderView.OrderLine != null)
                $scope.lastOrderViewId = $scope.lastOrderView.OrderNumber + ' - ' + $scope.lastOrderView.OrderAgence + ' (' + $scope.lastOrderView.OrderLine + ')';            
            else
                $scope.lastOrderViewId = $scope.lastOrderView.OrderNumber + ' - ' + $scope.lastOrderView.OrderAgence;

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }



    // WIDEGT For last Order display in button
    $scope.orderButtonOptions = {
       
        bindingOptions: {
            text: 'lastOrderViewId' //'lastOrderView.OrderNumber' + 'lastOrderView.OrderAgence' + '(lastOrderView.selectedLine) + [lastOrderView.OrderLibrary]'
        },
        type: "success",
        onClick: function (e) {
            search.orderNumber = $scope.lastOrderView.OrderNumber;
            search.agency = $scope.lastOrderView.OrderAgence.age;
            search.line = $scope.lastOrderView.OrderLine;
            search.library = "HISTOTEC"; //$scope.lastOrderView.Library
            console.log(search);
            getNumberOrderVersion(search);
        }
    };



    var getNumberOrderVersion = function ({ orderNumber, line, agency, library }) {
        console.log(orderNumber, line, agency, library);        
        $http({
            url: 'Api/GetNumberOrderVersion',
            method: 'GET',
            params: {
                OrderAgence: agency,
                OrderNumber: orderNumber
            }
        }).then(function (response) {
            console.log(response);
            var numberOrderVersion = response.data.length;          
            var idOrderComplete;  // Si la commande est déjà dans le système, on essaie de trouver une version contenant toutes les lignes de la commande

            /* FOR SPECIFIC ORDER VERSION
            //console.log($scope.allNumberOrderVersion);
            $scope.toTreeViewAgence = searchData.agency;
            $scope.toTreeViewOrder = searchData.order;
            $scope.toTreeViewLine = searchData.line;
            $scope.toTreeViewLibrary = searchData.library;

            $scope.allNumberOrderVersion.reverse();
                $scope.withOrder = true;
                $scope.forLoadIndicator = false;*/


            if (numberOrderVersion === 0) {
                // Check if the order exist before to send to treeview page
                $http({
                    url: 'Api/GetNumberOrderLineFromOrder',
                    method: 'GET',
                    params: {
                        orderNumber: orderNumber,
                        OrderAgence: agency,
                        systemName: 'MURPHY_CT'
                    }
                }).then(function (response) {
                    //console.log(response.data);
                    $scope.nbOrderLineFromOrder = response.data;

                    if ($scope.nbOrderLineFromOrder.length > 0) {

                        $scope.popup = true;
                        $scope.cancelImport = false;
                        $scope.titleForPopUp = "Commande : " + orderNumber;

                        $scope.progressBarValue = 0;
                        $scope.stopProgressBar = setInterval(updateProgressBar, 500);

                        // Permet d'annuler la poursuite de la requête grâce au param timeout
                        $scope.canceler = $q.defer();
                        var IdOrderNumber = null;

                        var len = line.length
                        if (len > 0) {

                            $scope.withoutOrderMsg = "Importation de " + len + " ligne(s) de commande";

                            var i;

                            // Do this method for each line we have, to do one by one, reload this same method in .then promise
                            function importLines(i) {
                                return $http({
                                    url: 'Api/ImportOrderLineFromAS400',
                                    method: 'GET',
                                    timeout: $scope.canceler.promise,
                                    params: {
                                        Library: library,
                                        Agency: agency,
                                        Order: orderNumber,
                                        Line: line[i].CDLG$D,
                                        idOrder: IdOrderNumber
                                    }
                                }).then(function (response) {
                                    IdOrderNumber = response.data;
                                    i++;

                                    // TODO :: Trouver un moyen pour signaler que la ligne en question a bien été importée pour informer l'utilisateur

                                    if (i < len) {
                                        importLines(i)
                                    }
                                    else {
                                        $scope.orderData = {
                                            idOrder: IdOrderNumber,
                                            orderNumber: orderNumber,
                                            library: library,
                                            agency: agency,
                                            agencyText: '',
                                            line: line,
                                            Version: 1
                                        }
                                        /*
                                        console.log($scope.orderData);
                                        $scope.SendToTreeView($scope.orderData);*/
                                    }

                                }).catch(function (response) {
                                    console.log("Problème lors de l'importation de la commande : " + orderNumber);
                                    console.log(response);                                                                        
                                });
                            }

                            importLines(0);

                        }

                        // On importe la commande entièrement
                        else {                           
                            $scope.withoutOrderMsg = "Importation de " + $scope.nbOrderLineFromOrder.length + " ligne(s) de commande";

                            $http({
                                url: 'Api/ImportOrderLineFromAS400',
                                method: 'GET',
                                timeout: $scope.canceler.promise,
                                params: {
                                    Library: library,
                                    Agency: agency,
                                    Order: orderNumber,
                                    Line: line,
                                    idOrder: IdOrderNumber
                                }
                            }).then(function (response) {
                                var IdOrderNumber = response.data;


                                $scope.orderData = {
                                    idOrder: IdOrderNumber,
                                    orderNumber: orderNumber,
                                    library: library,
                                    agency: agency,
                                    agencyText: '',
                                    line: line,
                                    version: 1
                                }                                
                            }).catch(function (response) {
                                console.log("Annulation de l'importation de la commande : " + orderNumber);
                                //console.log(response);                            
                            });
                        }
                    }
                    else
                        DevExpress.ui.notify('Aucune donnée trouvée pour cette commande [' + orderNumber + ']', "error", 2000);

                }).catch(function (response) {
                    console.log(response);
                });


            }
            else {

                // Search the last idOrder whom is imported completely
                for (var i = 0; i < numberOrderVersion; i++) {
                    if (response.data[i].IsComplete === 1) {
                        idOrderComplete = response.data[i].ID_Order                        
                    }
                }                                

                // If a complete order exist
                if (idOrderComplete != null) {
                    $scope.orderData = {
                        idOrder: idOrderComplete,
                        orderNumber: orderNumber,
                        library: library,
                        agency: agency,
                        agencyText: '',
                        line: line,
                        version: numberOrderVersion + 1
                    };
                }
                else {
                    // Avertir l'utilisateur que la commande n'est pas complète
                    $scope.popupOrderNotCompleteVisible = true;
                    $scope.orderNotCompleteMsg = "La commande " + orderNumber + " est déjà importée mais pas entièrement. Voulez-vous l'importer ou risquer un affichage non complet ?"


                    //Soit il l'a réimporte

                    // Sinon on prend la dernière                    
                    $scope.orderData = {
                        idOrder: response.data[numberOrderVersion - 1].ID_Order,
                        orderNumber: orderNumber,
                        library: library,
                        agency: agency,
                        agencyText: '',
                        line: line,
                        version: 1
                    }
                }
            }
            console.log($scope.orderData);
            $scope.SendToTreeView(searchData);
            }).catch(function (error) {
                console.log(error);
                DevExpress.ui.notify("Une erreur est survenue, veuillez recharger la page.", "error");
        });
    };





    /*
    // WIDGET List Version in Pop-up
    $scope.lookupOptionsVersion = {
        bindingOptions: {
            dataSource: "allNumberOrderVersion",
            value: 'allNumberOrderVersion[0]',
            visible: "withOrder"
        },
        popupHeight: 700,
        popupWidth: 250,
        showPopupTitle: true,
        closeOnOutsideClick: true,
        placeholder: "Sélectionner un numéro de version",
        displayExpr: "OrderVersion",
        onInitialized: function () {
            $scope.orderVersionSelected = $scope.allNumberOrderVersion[0].OrderVersion
            //console.log($scope.orderVersionSelected)
        },
        onItemClick: function (item) {
            $scope.orderVersionSelected = item.itemData.OrderVersion
        }
    };
*/



    // API récupère la liste des vues 
    $http({
        url: 'Api/GetViewList',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        //console.log(response.data);
        $scope.viewList = response.data;


        // Recoit la dernière vue utilisé
        $http({
            url: 'Api/GetLastViewUsed',
            method: 'GET',
            params: {
                ID_User: User.getID_User()
            }
        }).then(function (response) {
            //console.log(response.data);
            $scope.lastViewUsed = response.data;

            // Activate the widget line tagBox
            $(function () {
                var form = $("#form").dxForm("instance");

                form.getEditor("Vue active")
                    .option("dataSource", $scope.viewList);
                form.getEditor("Vue active")
                    .option("value", $scope.lastViewUsed[0].ID_View);
            });                   

        }), function (response) {
            console.log(response);
            alert(reponse);
        };

    }), function (response) {
        console.log(response);
        alert(reponse);
        };


    // WIDGET Form item
    $scope.itemsForm = [{
        itemType: "group",
        caption: "Informations requises",
        items: [{
            dataField: "Librairie",
            editorType: "dxRadioGroup",
            editorOptions: {
                items: Library,
                displayExpr: "libelle",
                valueExpr: "lib",
                layout: "horizontal",
                focusStateEnabled: true,
                onContentReady: function (e) {
                    //console.log(e);
                    $(".dx-radiobutton-icon-dot").css("background-color", "#CEA54A");
                }
            }
        }, {
            dataField: "Agence",
            editorType: "dxRadioGroup",
            editorOptions: {
                items: Agency,
                displayExpr: "libelle",
                valueExpr: "age",
                layout: "horizontal",
                focusStateEnabled: true,
                onContentReady: function (e) {
                    //console.log(e);
                    $(".dx-radiobutton-icon-dot").css("background-color", "#CEA54A");
                }
            }
        }, {
            dataField: "N° de commande",
            editorType: "dxTextBox",
            editorOptions: {
                placeholder: "N° de commande",
                showClearButton: true,
                maxLength: 9 // Format Commande AS400                    
                /*
                onEnterKey: function (e) {
                    
                }
                mask: "000000000",
                showMaskMode: "onFocus",
                maskInvalidMessage: "Format du N° de commande invalide",*/
            },
            validationRules: [{
                type: "required",
                message: "Numéro de commande requis"
            }, {
                type: "pattern",
                pattern: "^[0-9]+$",
                message: "Le numéro de commande peut uniquement contenir  des chiffres"
            }]
        }]
    }, {
        itemType: "group",
        caption: "Options",
            items: [{            
            dataField: "btnLigne",
            itemType: "button",
            alignment: "left",                            
            buttonOptions: {                
                type: "default",
                text: 'Recherche des lignes pour ce N° de commande',
                width: "100%",
                onContentReady: function (e) {
                    $(".dx-button.dx-button-default").dxButton({
                        icon: "fa fa-bars"
                    });
                },
                onClick: function (e) {
                    var valueOrderNumber = $scope.formOptionsInstance.getEditor('N° de commande').option('value');
                    if (valueOrderNumber === null || valueOrderNumber === undefined)
                        DevExpress.ui.notify('N° de commande non renseignée', "error", 2000);
                    else {
                        //before insert lines of order, delete previous data
                        $(function () {
                            $("#form").dxForm("instance").getEditor("Ligne").option("value", null);
                        });

                        // Search orderline of this order
                        $http({
                            url: 'Api/GetNumberOrderLineFromOrder',
                            method: 'GET',
                            params: {
                                orderNumber: valueOrderNumber,
                                OrderAgence: $scope.formOptionsInstance.getEditor('Agence').option('value'),
                                systemName: 'MURPHY_CT'
                            }
                        }).then(function (response) {
                            //console.log(response.data);
                            $scope.nbOrderLineFromOrder = response.data;

                            if ($scope.nbOrderLineFromOrder.length != 0) {
                                // Activate the widget line tagBox
                                $(function () {
                                    var form = $("#form").dxForm("instance");

                                    form.getEditor("Ligne")
                                        .option("disabled", false);
                                    form.getEditor("Ligne")
                                        .option("items", $scope.nbOrderLineFromOrder);
                                });
                                DevExpress.ui.notify('Vous pouvez désormais choisir des lignes', "succes", 2000);
                            }
                            else
                                DevExpress.ui.notify('N° de commande non valide', "error", 2000);
                        }).catch(function (response) {
                            DevExpress.ui.notify('N° de commande non valide', "error", 2000);
                            console.log(response);
                        });
                    }
                }
            }
        }, {
            dataField: "Ligne",
            editorType: "dxTagBox",
            editorOptions: {
                items: null,
                disabled: true,
                displayExpr: "CDLG$D",
                showSelectionControls: true,
                applyValueMode: "useButtons",
                placeholder: "Facultafif",
                noDataText: "Aucne ligne disponible pour ce N° de commande"
            }
        }, {
            dataField: "Vue active",
            editorType: "dxLookup",
            editorOptions: {
                closeOnOutsideClick: true,
                placeholder: 'Sélectionner une vue',
                displayExpr: 'ViewName',
                valueExpr: 'ID_View',
                onItemClick: function (e) {
                    User.setID_View(User.getID_User(), e.itemData.ID_View);
                }
            }
        }]
        }, {
            itemType: "button",
            horizontalAlignment: 'center',
            buttonOptions: {
                text: "Rechercher",
                type: "success",
                width: "100%",
                accessKey: "Enter",
                useSubmitBehavior: true,
                onContentReady: function (e) {
                    $(".dx-button.dx-button-success").dxButton({
                        icon: "fa fa-search"
                    });
                }
            }
        }, {
            itemType: "button",
            //horizontalAlignment: 'left',
            buttonOptions: {
                text: "Reset",
                type: "danger",
                width: "40%",               
                onContentReady: function () {
                    $(".dx-button.dx-button-danger").dxButton({
                        icon: "fa fa-close"
                    });
                },
                onClick: function (e) {
                    var form = $("#form").dxForm("instance");

                    form.getEditor("Librairie").option("value", Library[0].lib);
                    form.getEditor("Agence").option("value", Agency[0].age);
                    form.getEditor("N° de commande").option("value", "");
                    form.getEditor("Ligne").option("value", "");
                }
            }
        }     
    ];

    // WIDGET Form
    $scope.formOptions = {
        bindingOptions: {
            items: 'itemsForm'            
        },        
        colCount: 1,
        onInitialized: function (e) {
            $scope.formOptionsInstance = e.component;
            //console.log($scope.formOptionsInstance);
        },        
        onContentReady: function (e) {            
            $scope.formOptionsInstance.getEditor("Librairie").option("value", Library[0].lib);
            $scope.formOptionsInstance.getEditor("Agence").option("value", Agency[0].age);            
        },
        onEditorEnterKey: function (e) {
            $scope.searchOrder()
        }      
    }

    $scope.searchOrder = function (order) {        
        search.orderNumber = $scope.formOptionsInstance.getEditor('N° de commande').option('value');
        search.library = $scope.formOptionsInstance.getEditor('Librairie').option('value');
        search.agency = $scope.formOptionsInstance.getEditor('Agence').option('value');
        search.line = $scope.formOptionsInstance.getEditor('Ligne').option('value');
        console.log(search);

        getNumberOrderVersion(search);
    }

    $scope.SendToTreeView = function (searchData) {
        if (searchData.agency === '100')
            searchData.agencyTxt = 'ALL';
        else if (searchData.agency === '200')
            searchData.agencyTxt = 'ESP';
        else
            searchData.agencyTxt = 'FRA';

        User.getColor(User.getID_User()); // On charge les préférences couleurs        
        $scope.updateLastOrderDisplay(searchData); // On sauvegarde la dernière commmande recherchée
        Order.sendToTreeView(searchData); // On envoie les données sur une autre page dédié au TV  
    }


}






// TREEVIEW \\
function searchTreeView($scope, $http, $window, $location, localstorage, User, Order) {

    // On stock les préférences couleurs
    var colorObj = localstorage.getObject('colorValue', "colorValue erreur");
    //console.log(colorObj);

    $scope.TVerror = "";
    $scope.toolTipOfNodeText = "";
    $scope.toolTipElement = "";
    $scope.TreeViewOptionsPrincipaleInstance;
    $scope.loadingIndicator = true;
    $scope.fontSizeTreeView = 18;
    $scope.toolTipActive = false;
    $scope.treeviewClickItem = false;
    $scope.decompo = false;

    // Need to bind with the défault value of tool tip checkbox
    //$scope.toolTipTarget = 'div.dx-item.dx-treeview-item.dx-state-hover'
    $scope.toolTipTarget = 'null' 

    var GetCustomJsonOrderFirstLine = function (IdOrder, OrderLine) {
        $http({
            url: 'Api/GetCustomJsonOrderFirstLine',
            method: 'GET',
            params: {
                ID_Order: IdOrder,
                ID_View: User.getID_View(User.getID_User()),
                OrderLine: OrderLine
            }
        }).then(function (response) {
            $scope.jsonOrder = response.data;
            // Si aucune donnée n'est chargée
            if ($scope.jsonOrder.length === 0) {
                DevExpress.ui.notify('Aucune donnée chargée ! Erreur possible : Aucune colonne n\'est cochée dans votre vue pour la zone du treeview', "error", 1000);
                $scope.TVerror = "Erreur lors du chargement des données de la commande ! Aucune donnée n'a pu être obtenue.";
            }

            console.log($scope.jsonOrder);        
            $scope.loadingIndicator = false;

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    var nodeHasChildren = function (node) {
        if (node.children.length === 0) {
            return false;
        }
        else
            return true;
    };

    /* DECOMPOSITION INTERACTIVE */
    var loc = $location.search();
    if (loc.table /*&& loc.mode === 'TST'*/) {
        // Data come from parameteres URL
        $scope.decompo = true;

        var OrderDataInt = {
            IdOrder: 999,
            OrderNumber: 999,
            Library: loc.table,
            Agency: 999,
            AgencyText: 'INT',
            Line: 0,
            Version: 0
        }        


        $http({
            url: 'Api/ImportOrderLineFromAS400',
            method: 'GET',
            params: {
                Library: OrderDataInt.Library,
                Agency: OrderDataInt.Agency,
                Order: OrderDataInt.OrderNumber,
                Line: OrderDataInt.Line,
                idOrder: null
            }
        }).then(function (response) {
            var IdOrderNumber = response.data;
            if (isNaN(IdOrderNumber)) {
                DevExpress.ui.notify('Aucune commande trouvée ! [' + order + '] - [' + agence + '] (' + search.library.Lib + ')', "error", 3000);                
            }
            else {
                $scope.orderData = {
                    idOrder: IdOrderNumber,
                    orderNumber: 999,
                    library: loc.table,
                    agency: 999,
                    agencyText: 'INT',
                    line: 0,
                    version: 1                    
                }
                GetCustomJsonOrderFirstLine($scope.orderData.idOrder, $scope.orderData.line);
            }
            console.log($scope.orderData);
        }), function (response) {
            console.log(response);
            alert(reponse);
        };
               
        //$scope.$watch($scope.orderData, console.log('oui'), true); //GetCustomJsonOrderFirstLine()
        
    }
    else {       
        // Data come from Rehcerche
        $scope.orderData = {
            idOrder: window.idOrder,
            orderNumber: window.orderNumber,
            library: window.library,
            agency: window.agency,
            agencyTxt: window.agencyTxt,
            line: window.line,
            version: window.version
        }
        console.log($scope.orderData);

        if ($scope.orderData.line.length > 0) {
            var lines = "";
            for (var p = 0; p < $scope.orderData.line.length; p++) {
                lines += $scope.orderData.line[p].CDLG$D + ",";                
            }
            GetCustomJsonOrderFirstLine($scope.orderData.idOrder, lines);
        }
        else {
            GetCustomJsonOrderFirstLine($scope.orderData.idOrder, $scope.orderData.line);
        }              
    }

    // To know if the user want to see deleted lines
    $http({
        url: 'Api/GetSettingDisplayDeletedLine',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        var result = response.data[0].CustomSettingValue;
        //console.log(result);
        if (result == 1)
            $scope.displayDeletedLine = true
        else
            $scope.displayDeletedLine = false

    }), function (response) {
        console.log(response);
        alert(reponse);
    };



    // WIDGET show or not the tooltip
    $scope.checkBoxToolTip = {
        bindingOptions: {
            value: 'toolTipActive'
        },
        onOptionChanged: function (e) {
            if ($scope.toolTipActive) {
                $scope.toolTipTarget = 'div.dx-item.dx-treeview-item.dx-state-hover'
            }
            else {
                $scope.toolTipTarget = 'null'
            }
        }
        //, text: "Afficher l'info-bulle"
    }

    // WIDGET show or not the detail zone
    $scope.checkBoxDetailZone = {
        bindingOptions: {
            value: 'treeviewClickItem'
        }
    }

    // WIDGET font-size of treeview
    $scope.sizeFontTreeView = {
        bindingOptions: {
            value: "fontSizeTreeView",
        },
        min: 8,
        max: 24,
        showSpinButtons: true
    };

    $scope.fontFamilyTreeView = fontFamily[0].font;

    // WIDGET choose the family font of the treeview    
    $scope.familyFontTreeView = {
        dataSource: fontFamily,
        valueExpr: "font",
        bindingOptions: {
            value: 'fontFamilyTreeView'
        },
        showPopupTitle: false,
        closeOnOutsideClick: true,
        placeholder: "Sélectionner une typographie",
        displayExpr: "text",
        onValueChanged: function (e) {
            //console.log(e);
        }
    }

    // If the user right-click and open a new tab of this order
    $scope.SendToTreeView = function (OrderData) {
        // Dans ce cas, on ne sauvegarde pas cette recherche comme dernière commande recherchée 
        User.getColor(User.getID_User()); // On charge les préférences couleurs        
        Order.sendToTreeView(OrderData);
    }

    //WIDGET TreeView
    $scope.treeView = {
        bindingOptions: {
            items: 'jsonOrder'
        },
        dataStructure: "plain",
        parentIdExpr: "IdTreeviewParent",
        keyExpr: "IdTreeview",
        hasItemsExpr: "hasItems",
        displayExpr: "NodeText",
        noDataText: "",
        rootValue: null,
        //virtualModeEnabled: true,  Ne fait pas gagner de temps       

        onContentReady: function (e) {
            //console.log(e);            
            $scope.TreeViewOptionsInstanceComponent = e.component;
        },
        onItemExpanded: function (e) {
            // TODO :: To put a vertical line to see where the node expanded is finish
            //console.log(e);

            // When expanding a node, get the children foreach child of the node
            if (e.node.children.length) {
                var nbChildren = e.node.children.length;
                var nodeChildren = e.node.children;

                //console.log(nbChildren + ' enfant(s)');
                $scope.jsonToAddOneTime = [];
                $scope.jsonToAdd = [];

                for (var i = 0; i < nbChildren; i++) {
                    if (!nodeHasChildren(nodeChildren[i])) {
                        //console.log(nodeChildren[i]);
                        var childData = nodeChildren[i].itemData;

                        // A la plcae de la flèche mettre un loader

                        $http({
                            url: 'Api/GetCustomJsonLine',
                            method: 'GET',
                            params: {
                                ID_View: User.getID_View(User.getID_User()),
                                TableName: childData.TableName,
                                IdDataSource: childData.IdDataSource,
                                idTreeview: childData.IdTreeview
                            }
                        }).then(function (response) {
                            //console.log(response.data);
                            $scope.jsonToAdd = response.data;

                            // Ajout de son identifiant 'IdTreeview'
                            for (var i = 0; i < $scope.jsonToAdd.length; i++) {
                                $scope.jsonToAdd[i].IdTreeview = $scope.jsonOrder.length + i + 1;
                            }

                            // Ajout dans la source du TV (performe séparément sinon l'un prend le dessus, besoin d'une promise...)
                            for (var i = 0; i < $scope.jsonToAdd.length; i++) {
                                $scope.jsonOrder.push($scope.jsonToAdd[i]);
                                $scope.jsonToAddOneTime.push($scope.jsonToAdd[i]);
                            }

                            //console.log($scope.jsonToAddOneTime);
                            //$scope.jsonOrder.push($scope.jsonToAdd);

                            
                        }), function (response) {
                            console.log(response);
                            alert(reponse);
                        };

                        
                        console.log($scope.jsonToAddOneTime);
                    }

                }


            }
        },
        onItemRendered: function (e) {
            //console.log(e);            

            // Expand the first node (Order)
            if (e.itemIndex === 1) {
                e.node.internalFields.expanded = true;
            }

            //To change the size of each line                
            e.itemElement[0].style.margin = "-6px 0px 0px 0px";
            e.itemElement[0].style.padding = "0px 0px 0px 3px";
            e.itemElement[0].style.lineHeight = "25px";

            // To see or not the deleted lines
            if (!$scope.displayDeletedLine && !$scope.decompo) {
                $scope.LineJsonData = angular.fromJson(e.itemData.JsonRawData);

                var afterATAT = 'ATAT":"'.length;
                var toFind = e.itemData.JsonRawData.indexOf('ATAT') + afterATAT;

                if (e.itemData.JsonRawData.charAt(toFind) === '*') {
                    e.itemElement[0].hidden = true;
                }
            }

            //To change the color with the user setting
            e.itemElement.css('color',
                e.itemData.TypeLine === 'C' ? colorObj.Commande : e.itemData.TypeLine === 'A' ? colorObj.Ligne : e.itemData.TypeLine === 'O' ? colorObj.GammeOpe :
                    e.itemData.TypeLine === 'P' ? colorObj.Pere : e.itemData.TypeLine === 'N' ? colorObj.Fils : e.itemData.TypeLine === 'V' ? colorObj.Virtuelle : e.itemData.TypeLine === 'U' ? colorObj.Usinage :
                        e.itemData.TypeLine === 'S' ? colorObj.EtapeUsi : e.itemData.TypeLine === 'G' ? colorObj.MatiereGen : e.itemData.TypeLine === 'I' ? colorObj.IPM : e.itemData.TypeLine === 'F' ? colorObj.Fabrication :
                            e.itemData.TypeLine === 'W' ? colorObj.PDC : "black");

            //To find the text for tooltip with the mouse hover it
            e.element
                .find(".dx-treeview-item")
                .on("mouseover", function (e) {

                    var data = $(e.currentTarget).data().dxTreeviewItemData;
                    $scope.toolTipOfNodeText = data.NodeToolTip;

                    var element = document.getElementById('toolTipText')
                    if (element != null) {
                        element.innerHTML = $scope.toolTipOfNodeText;
                        $scope.hideToolTip = false;
                    }
                });
        },

        onItemClick: function (node) {
            $scope.nodeData = node.itemData;
            //console.log(node);                           

            // GET data for detail zone
            $http({
                url: 'Api/GetDetailLineData',
                method: 'GET',
                params: {
                    ID_View: User.getID_View(User.getID_User()),
                    TableSubLevelType: $scope.nodeData.TypeLine,
                    TableName: $scope.nodeData.TableName,
                    JsonField: $scope.nodeData.JsonRawData
                }
            }).then(function (response) {
                //console.log(response.data);                    
                $scope.detailLineData = response.data[0].DetailText

                // To add <br> (need to pass the text by html and not by string)
                var element = document.getElementById('zone-detail-text')
                if (element != null) {
                    element.innerHTML = $scope.detailLineData
                }

            }), function (response) {
                console.log(response);
                alert(reponse);
            };
        },

        onItemContextMenu: function (e) {
            $scope.parentNode = null;
            console.log(e);
            $scope.nodeSelected = e.itemData;

            if (e.node.children.length) {
                $scope.parentNode = e;
                console.log($scope.parentNode);
            }

            $scope.menuTarget = e.itemElement;
        }
    };

    // Défaut, le menu TV est caché
    $scope.menuVisible = false;

    // WIDGET Context menu TV (right-click)
    $scope.contextMenuTreeview = {
        target: 'div.dx-item.dx-treeview-item',
        dataSource: ContextMenuTreeViewItems,

        itemTemplate: function (itemData, itemIndex, itemElement) {
            var template = $('<div></div>');
            //var rootPathImg = 'Content/img/contextMenuTreeView/'
            if (itemData.icon) {
                template.append('<span class="' + itemData.icon + '"><span>');
            }
            template.append(' ' + itemData.text);
            // If node avec children add a ->
            if (itemData.items) {
                template.append('<span class="dx-icon-spinright"><span>');
            }
            return template;
        },

        onItemClick: function (e) {
            //console.log(e);
            var key = e.itemData.key;
            var subKey = e.itemData.subKey;

            switch (key) {
                case 'Expand': {

                    break;
                }
                case 'Collapse': {
                    //fERME TOUS LES Noeuds, faire juste ceux après les orderline
                    $scope.TreeViewOptionsInstanceComponent.collapseAll();
                    /*
                    if ($scope.parentNode) {                                                
                        $scope.parentNode.component.collapseItem($scope.parentNode.node.itemData.IdTreeview);
                        //console.log($scope.parentNode.expanded);
                    }*/
                    break;
                }
                case 'New': {
                    if (subKey === 'Order') {
                        $scope.SendToTreeView($scope.orderData);
                        /*console.log($scope.$emit("CallSendToTreeView", { order: $scope.Order, agence: $scope.Agency }));
                        $rootScope.$emit("CallSendToTreeView", { order: $scope.Order, agence: $scope.Agency });*/
                    }
                    else if (subKey === 'Line') {

                    }

                    break;
                }
                case 'Export': {
                    if (subKey) {
                    }

                    break;
                }
                default: {

                    break;
                }
            }


            // If click on last item (with no children)
            if (!e.itemData.items) {
                DevExpress.ui.notify("The \"" + e.itemData.text + "\" item was clicked", "success", 1500);
            }
            //console.log($scope.nodeSelected);                       
        }
    }
    
    //WIDGET ToolTip for node
    $scope.toolTip = {
        position: 'bottom',
        bindingOptions: {
            target: 'toolTipTarget'
        },
        //visible: $scope.toolTipActive,
        onContentReady: function (e) {
            $scope.toolTipInstance = e.component;
            $scope.toolTipInstance.show();
            console.log($scope.toolTipInstance);
        },
        showEvent: {
            //name: 'dxpointerenter dxhoverstart',                
            name: 'dxpointerover'
        },
        hideEvent: {
            name: 'dxpointerout dxpointerleave',
        },
        animation: {
            show: {
                type: "pop",
                from: {
                    scale: 0.1,
                    opacity: 0
                },
                to: {
                    opacity: 1,
                    scale: 1
                }
            },
            hide: {
                type: "pop",
                from: {
                    scale: 1,
                    opacity: 1
                },
                to: {
                    scale: 0.1,
                    opacity: 0
                }
            }
        }
    };

    $scope.zoneDetail = {
        handles: "left"
        // in html ng-if to display it or not
        // Options taille dans le style.CSS        
    };

    $scope.zoneScroll = {
        scrollByContent: true,
        scrollByThumb: true,
        reachBottomText: 'Chargement...',
        showScrollbar: 'onHover',
        bounceEnabled: false,
        scrollByContent: false
    }

    $scope.fontSizeDetail = 12;

    $scope.increaseFont = function () {
        if ($scope.fontSizeDetail <= 24) {
            $scope.fontSizeDetail++;
        }
    }

    $scope.decreaseFont = function () {
        if ($scope.fontSizeDetail >= 8) {
            $scope.fontSizeDetail--;
        }
    }




    // menu de l'accordéon
    var collapsible = [{
        txt: 'Options du TreeView'
    }];

    // Widget de l'accordéon
    $scope.collapsibleOptions = {
        dataSource: collapsible,
        animationDuration: 200,
        collapsible: true,
        multiple: true,
        selectedItems: true

    };

}
