'use strict';

angular.module('BOMViewer')
    .controller('customVisualisation', customVisualisation)
    .controller('customVisualisationField', customVisualisationField)
    .controller('customVisualisationLine', customVisualisationLine)    

// Injection des dépendances des contrôleurs
customVisualisation.$inject = ['$scope', '$location', '$http', '$window', 'ViewSetting', 'User'];
customVisualisationField.$inject = ['$scope', '$http', 'ViewSetting'];
customVisualisationLine.$inject = ['$scope', '$http', 'ViewSetting', 'User'];


function customVisualisation($scope, $location, $http, $window, ViewSetting, User) {    
    // Accordion
    $scope.animationDuration = 300;
    $scope.collapsible = true;
    $scope.multiple = true;
    $scope.selectedItems = false; // No one will be expanded by default
    $scope.toDisplayForView = false; // Wait to click on a view to display options
    $scope.listColumnViewEnable = false; /// To enable the saving of preference column view


    // Widget de l'accordéon
    $scope.accordionOptions = {
        dataSource: accordionItems,
        itemTemplate: "options",
        bindingOptions: {
            animationDuration: "animationDuration",
            collapsible: "collapsible",
            multiple: "multiple",
            selectedItems: "selectedItems"
        }
    };

    // Widget Bouton
    $scope.applyButtonOptions = {
        text: "Sauvegarder",
        type: "success",
        width: 150,
        bindingOptions: {
            disabled: '!toDisplayForView'
        },        
        onClick: function (e) {
            //console.log(ViewSetting.getIdTypeLine());
            $scope.returnNotification;
            if ($scope.listTypeLineOfTable) //Only if one type of line is selected
            {
                //To UPDATE Column of the view
                $http({
                    url: 'Api/UpdatePreferenceColumnOfView',
                    method: 'GET',
                    params: {
                        idView: $scope.IdViewSelected,
                        idSubLevel: ViewSetting.getIdTypeLine(),
                        listePrincipale: ViewSetting.getListeP(),
                        listeSecondaire: ViewSetting.getListeS()
                    }
                }).then(function (response) {
                    //console.log(response.data);                
                    if (response.data === "True") {
                        $scope.returnNotification = "Configuration sauvegardée ! (zone)";                        
                    }
                    else {
                        $scope.returnNotification = "Erreur dans la sauvegarde de la configuration (zone) ! Veuillez réessayez plus tard...";                         
                    }
                }), function (response) {
                };
            }


            if ($scope.toDisplayForView) { //Only if one view is selected
                //To UPDATE Level Type of the view
                $http({
                    url: 'Api/UpdatePreferenceLineOfView',
                    method: 'GET',
                    params: {
                        ID_View: $scope.IdViewSelected,
                        ListLine: ViewSetting.getListLine()
                    }
                }).then(function (response) {
                    console.log(response.data);
                    if (response.data === "True") {
                        $scope.returnNotification = "Configuration sauvegardée ! (ligne)";
                    }
                    else {
                        $scope.returnNotification = "Erreur dans la sauvegarde de la configuration (ligne) ! Veuillez réessayez plus tard...";                              
                    }
                }), function (response) {
                };
            }
            DevExpress.ui.notify($scope.returnNotification);

        }
    };
    
    $scope.cancelButtonOptions = {
        text: "Annuler",
        type: "danger",
        width: 100,
        bindingOptions: {
            disabled: '!toDisplayForView'
        },      
        onClick: function (e) {
            // On update les préférences des colonnes avec celle de base lors du chargement de la vue
            $http({ 
                url: 'Api/UpdatePreferenceColumnOfViewAll',
                method: 'GET',
                params: {
                    idView: $scope.IdViewSelected,
                    listePrincipale: ViewSetting.getListeDefaultP(),
                    listeSecondaire: ViewSetting.getListeDefaultS()
                }
            }).then(function (response) {
                console.log(response.data);
                console.log(response);
                if (response.data === "True") {
                    DevExpress.ui.notify("Modifications annulées!");     

                    $scope.selectedItemsPrincipal = ViewSetting.getListeDefaultP();
                    $scope.selectedItemsDetail = ViewSetting.getListeDefaultS();
                    ViewSetting.setListeP($scope.selectedItemsPrincipal);
                    ViewSetting.setListeS($scope.selectedItemsDetail);             
                }
                else
                    DevExpress.ui.notify("Erreur dans l'annulation des modifications ! Veuillez réessayez plus tard...");

            }), function (response) {
                console.log(response);
                alert(reponse);
                DevExpress.ui.error("Erreur dans l'annulation des modifications ! Veuillez réessayez plus tard...");
                };


            //To UPDATE Level Type of the view
            $http({
                url: 'Api/UpdatePreferenceLineOfView',
                method: 'GET',
                params: {
                    ID_View: $scope.IdViewSelected,
                    ListLine: ViewSetting.getListLineOriginal()
                }
            }).then(function (response) {
                console.log(response.data);
                if (response.data === "True") {
                    DevExpress.ui.notify("Modifications annulées!");  
                }
                else {
                    DevExpress.ui.notify("Erreur dans l'annulation des modifications ! Veuillez réessayez plus tard...");
                }
            }), function (response) {
            };






        }
    };



    $http({
        url: 'Api/GetViewList',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        $scope.result = response.data;
        //console.log($scope.result);

        //WIDGET List of the view 
        $scope.listOfView = {
            items: $scope.result,
            showPopupTitle: false,
            closeOnOutsideClick: true,
            placeholder: "Sélectionner une vue",
            displayExpr: "ViewName",
            onItemClick: function (e) {
                //console.log(e.itemData);
                $scope.toDisplayForView = true;
                $scope.ViewName = e.itemData.ViewName;
                $scope.ViewDesc = e.itemData.ViewDesc;
                $scope.IdViewSelected = e.itemData.ID_View;
            }
        };
        
    }), function (response) {
        console.log(response);
        alert(reponse);
    };

}

// COLUMNS LIST \\
function customVisualisationField($scope, $http, ViewSetting) {

    //TODO  :: Rafraîchir les données de la liste des types de lignes  + liste détail/arbo lorsque la sélection d'une des listes ( ligne ou table ) est changé...
    
    var firstTime = true;
    $scope.listOptionsPrincipaleInstance = null;
    $scope.listOptionsDetailInstance = null;

    $scope.selectAllMode = "allPages";
    $scope.selectionMode = "multiple";


    // Une fois une vue sélectionnée, on charge tous ses paramètres de départ dans le cas où l'utilisateur annule ses changements, on pourra revenir en arrière grâce à ce charegement
    GetPreferenceColumnOfViewAll();


    // Affiche la liste des tables 
    $http({
        url: 'Api/GetTableList',
        method: 'GET'
    }).then(function (response) {
        $scope.resultTable = response.data;

        // List of Table
        $scope.lookupOptionsTable = {
            dataSource: $scope.resultTable,
            showPopupTitle: false,
            closeOnOutsideClick: true,
            placeholder: "Sélectionner une table",
            displayExpr: "TableName",
            onValueChanged: function (e) {
                $scope.SystemName = e.value.SystemName;
                $scope.LibraryName = e.value.LibraryName;
                $scope.TableName = e.value.TableName;

                $http({
                    url: 'Api/GetTypeLineOfTable',
                    method: 'GET',
                    params: {
                        tableName: $scope.TableName
                    }
                }).then(function (response) {
                    $scope.resultTypeLine = response.data;
                    console.log($scope.resultTypeLine);
                    $scope.listColumnViewEnable = true; // To enable the saving of preference column view

                    // Widget for the List of Line type
                    $scope.lookupOptionsLine = {
                        //dataSource: $scope.resultTypeLine,
                        bindingOptions: {
                            dataSource: "resultTypeLine"
                        },
                        showPopupTitle: false,
                        closeOnOutsideClick: true,
                        placeholder: "Sélectionner un type de ligne",
                        displayExpr: "TableSubLevelType",
                        onValueChanged: function (e) {
                            $scope.idLineType = e.value.ID_TableSubLevel;
                            ViewSetting.setIdTypeLine($scope.idLineType);
                            GetPrimaryList();
                            //console.log($scope.previousIdSubLevel);

                            if (!firstTime) {
                                $scope.previousIdSubLevel = e.previousValue.ID_TableSubLevel;
                                UpdatePreferenceColumnOfView(); // Nécessaire d'enregistrer car les listes dépendent du type de ligne sélectionné
                            }
                            else { // Dans un 1er temps, on recoit juste les pref., sinon dans un 2ième on update d'abord, puis on recoit les pref. (GetPreference imbriqué dans UpdatePref)
                                GetPreferenceColumnOfView();                                                       
                            }
                            $scope.toDisplay = true;
                            firstTime = false;


                            // Widget contenant la liste des paramètres pour la zone d'arboresence
                            // TODO :: Mettre en avant les champs sélectionner dans la liste
                            $scope.listOptionsPrincipale = {
                                height: 650,
                                keyExpr: "key",
                                bindingOptions: {
                                    selectionMode: "selectionMode",
                                    selectAllMode: "selectAllMode",
                                    dataSource: "primaryList",
                                    selectedItemKeys: "selectedItemsPrincipal"
                                },
                                allowItemReordering: true,
                                showSelectionControls: true,
                                searchEnabled: true,
                                searchMode: "contains",
                                searchExpr: ['ColumnName', 'ColumnDesc'],
                                onContentReady: function (e) { 
                                    $scope.listOptionsPrincipaleInstance = e.component;
                                },
                                onItemClick: function (item) {
                                    ViewSetting.setListeP($scope.selectedItemsPrincipal);
                                },
                                onItemReordered: function (e) {
                                    // Besoin de le re-seléctionner une fois bouger car sinon la liste ne prend pas en compte sa position
                                    if ($scope.listOptionsPrincipaleInstance.isItemSelected(e.toIndex)) {
                                        $scope.listOptionsPrincipaleInstance.unselectItem(e.toIndex);
                                        $scope.listOptionsPrincipaleInstance.selectItem(e.toIndex);
                                    }
                                    ViewSetting.setListeP($scope.selectedItemsPrincipal);
                                    $scope.listOptionsPrincipaleInstance.repaint();
                                }
                            };

                            // Widget contenant la liste des paramètres pour la zone de détail
                            $scope.listOptionsSecondaire = {
                                height: 650,
                                keyExpr: "key",
                                bindingOptions: {
                                    selectionMode: "selectionMode",
                                    selectAllMode: "selectAllMode",
                                    dataSource: "primaryList",
                                    selectedItemKeys: "selectedItemsDetail"
                                },
                                allowItemReordering: true,
                                showSelectionControls: true,
                                searchEnabled: true,
                                searchMode: "contains",
                                searchExpr: ['ColumnName', 'ColumnDesc'],
                                onContentReady: function (e) { // Met au début de la liste tous les champs sélectionnés de base
                                    $scope.listOptionsDetailInstance = e.component;
                                },
                                onItemClick: function (item) {
                                    ViewSetting.setListeS($scope.selectedItemsDetail);
                                },
                                onItemReordered: function (e) {
                                    if ($scope.listOptionsDetailInstance.isItemSelected(e.toIndex)) {
                                        $scope.listOptionsDetailInstance.unselectItem(e.toIndex);
                                        $scope.listOptionsDetailInstance.selectItem(e.toIndex);
                                    }
                                    ViewSetting.setListeS($scope.selectedItemsDetail);
                                    $scope.listOptionsDetailInstance.repaint();
                                }
                            };
                        }
                    };
                }), function (response) {
                    console.log(response);
                    alert(reponse);
                };
            }
        };

    }), function (response) {
        console.log(response);
        alert(reponse);
    };



    // Get the list for Arbo & Detail view 
    function GetPrimaryList() {
        $http({
            url: 'Api/GetPrimaryListOptions',
            method: 'GET',
            params: {
                system: $scope.SystemName,
                library: $scope.LibraryName,
                table: $scope.TableName,
                line: $scope.idLineType
            }
        }).then(function (response) {
            $scope.primaryList = response.data;

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    // Cette fonction prend les enregistrements concernant la vue en fonction du type de ligne sélectionné
    function GetPreferenceColumnOfView() {
        $http({
            url: 'Api/GetPreferenceColumnOfView',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                idSubLevel: $scope.idLineType
            }
        }).then(function (response) {
            var listeP = [];
            var listeS = [];
            var i = 0;
            while (i !== response.data.length) {
                if (response.data[i].DetailLevel === 0) {
                    listeP.push(response.data[i].key); // KEY = ID_Column + _ + ID_TableSubLevel
                }
                else {
                    listeS.push(response.data[i].key);
                }
                i++;
            }

            // Permet de créer une liste identifiant la colonne pour le type de ligne à pré-cocher lors de l'affichage des choix de zone de la vue
            $scope.selectedItemsPrincipal = listeP;
            $scope.selectedItemsDetail = listeS;
            ViewSetting.setListeP($scope.selectedItemsPrincipal);
            ViewSetting.setListeS($scope.selectedItemsDetail);
            console.log($scope.selectedItemsPrincipal);
            console.log($scope.selectedItemsDetail);

        }), function (response) {
            console.log(response);
        };
    }

    // Cette fonction prend tous les enregistrements concernant la vue pour une éventuelle remise à 0 (annulation des changements)
    function GetPreferenceColumnOfViewAll() {
        $http({
            url: 'Api/GetPreferenceColumnOfViewAll',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected
            }
        }).then(function (response) {
            var listeP = [];
            var listeS = [];
            var i = 0;
            while (i !== response.data.length) {
                if (response.data[i].DetailLevel === 0) {
                    listeP.push(response.data[i].key); // KEY = ID_Column + _ + ID_TableSubLevel
                }

                else {
                    listeS.push(response.data[i].key);
                }
                i++;
            }            
            ViewSetting.setListeDefaultP(listeP);
            ViewSetting.setListeDefaultS(listeS);
            //console.log(ViewSetting.getListeDefaultP());
            //console.log(ViewSetting.getListeDefaultS());
        }), function (response) {
            console.log(response);
        };
    }

    function UpdatePreferenceColumnOfView() {
        //console.log(ViewSetting.getListeP());
        //console.log(ViewSetting.getListeS());

        $http({
            url: 'Api/UpdatePreferenceColumnOfView',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                idSubLevel: $scope.previousIdSubLevel,
                listePrincipale: ViewSetting.getListeP(),
                listeSecondaire: ViewSetting.getListeS()
            }
        }).then(function (response) {
            console.log(response.data);
            console.log($scope.previousIdSubLevel);

            // On appelle cette fonction car il faut d'abord enregistrer les pref., puis les recevoir car si on enchaîne les deux dans la requête HTTP, Angularjs traitera le GetPreferenceOfView avant de sauvegarder (Update)
            GetPreferenceColumnOfView();

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    function UpdatePreferenceColumnOfViewAll() {
       //console.log(ViewSetting.getListeP());
       //console.log(ViewSetting.getListeS());

        $http({
            url: 'Api/UpdatePreferenceColumnOfViewAll',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                listePrincipale: ViewSetting.getListeP(),
                listeSecondaire: ViewSetting.getListeS()
            }
        }).then(function (response) {
            console.log(response.data);

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }
}

// Type LINE FILTER \\ 
function customVisualisationLine($scope, $http, ViewSetting, User) {

    // Get the list of the preference of the view selected
    GetPreferenceLineOfView();

    // Load all the list of each type line of tables
    $http({
        url: 'Api/GetTableSubLevels',
        method: 'GET'
    }).then(function (response) {
        $scope.resultLine = response.data;
        //console.log($scope.resultLine);

        // Groupe the array with a selector
        var dataSourceGrouped = new DevExpress.data.DataSource({
            store: $scope.resultLine,
            group: { selector: "TableName"}            
        });        
        //console.log(dataSourceGrouped);
 
        // WIDGET List of Line
        $scope.listOptionsLine = {
            height: 650,            
            dataSource: dataSourceGrouped,
            bindingOptions: {                
                selectedItemKeys: 'selectedItems'
            },
            keyExpr: "ID_TableSubLevel",
            showSelectionControls: true,
            searchEnabled: true,
            searchMode: "contains",
            searchExpr: ['TableSubLevelType'],
            selectionMode: "all",
            selectAllMode: "allPages",            
            grouped: true,
            collapsibleGroups: true,

            groupTemplate: function (data) {
                //console.log(data);                
                return $("<div>Table : " + data.key + "</div>");
            },            
            itemTemplate: function (itemData) {
                //console.log(itemData);           
                return $("<p>" + itemData.TableSubLevelType + " (" + itemData.TableSubLevelDesc + ")</p>");
            },
            onContentReady: function (e) {
                //$scope.listLineInstance = e.component;
            },
            onItemClick: function (item) {                
                //console.log($scope.selectedItems);
            }
        };
    }), function (response) {
        console.log(response);
        alert("Erreur lors du chargement de la liste des types de lignes...");
        };





    function GetPreferenceLineOfView() {
        $http({
            url: 'Api/GetPreferenceLineOfView',
            method: 'GET',
            params: {
                ID_View: $scope.IdViewSelected                
            }
        }).then(function (response) {
            //console.log(response.data)
            var keyListSelected = [];
            var i = 0;
            while (i !== response.data.length) {
                keyListSelected.push(response.data[i].ID_TableSubLevel);               
                i++;
            }                        
            $scope.selectedItems = keyListSelected;           
            //console.log($scope.selectedItems);

            // keep the original data in the case when the user want to cancel his changes
            $scope.originalSelectedItems = $scope.selectedItems;
            ViewSetting.setListLineOriginal($scope.originalSelectedItems);
        }), function (response) {
            console.log(response);
        };
    }
}

