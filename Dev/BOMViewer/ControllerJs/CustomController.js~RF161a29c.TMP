'use strict';

angular.module('BOMViewer')
    .controller('customVisualisation', customVisualisation)
    .controller('customVisualisationColorbox', customVisualisationColorbox)
    .controller('customVisualisationList', customVisualisationList)
    
    .service('sharedProperties', function () {
        var listeP;
        var listeS;

        return {
            getListeP: function () {
                return listeP;
            },
            getListeS: function () {
                return listeS;
            },
            setListeP: function (value) {
                listeP = value;
            },
            setListeS: function (value) {
                listeS = value;
            }
        };
    });

// Injection des dépendances des contrôleurs
customVisualisation.$inject = ['$scope', '$location', '$http', 'sharedProperties'];
customVisualisationColorbox.$inject = ['$scope', '$location', '$localStorage'];
customVisualisationList.$inject = ['$scope', '$http', '$controller', 'sharedProperties'];



function customVisualisation($scope, $location, $http, sharedProperties) {    

    // Accordion
    $scope.animationDuration = 300;
    $scope.collapsible = true;
    $scope.multiple = true;
    $scope.selectedItems = false; // No one will be expanded by default
    var toDisplayForView = false;

    // Widget de l'accordéon
    $scope.accordionOptions = {
        dataSource: accordionItems,
        itemTemplate: "customer",
        bindingOptions: {
            animationDuration: "animationDuration",
            collapsible: "collapsible",
            multiple: "multiple",
            selectedItems: "selectedItems"
        }
    };

    // Widget Bouton
    $scope.applyButtonOptions = {
        text: "Sauvegarder",
        type: "success",
        width: 150,
        onClick: function (e) {

            console.log($scope.selectedItemsPrincipal);
            console.log($scope.selectedItemsDetail);

            //To modifidy preference of the selected View
            $http({
                url: 'Api/UpdatePreferenceOfView',
                method: 'GET',
                params: {
                    idView: $scope.IdViewSelected,
                    idSubLevel: $scope.idLineType,
                    ListePrincipale: sharedProperties.getListeP(),
                    ListeSecondaire: sharedProperties.getListeS()
                }
            }).then(function (response) {
                console.log(response.data);
                console.log(response);
                if (response.data === "True") {
                    DevExpress.ui.notify("Configuration sauvegardé !");
                }                
                else
                    DevExpress.ui.notify("Erreur dans la sauvegarde de la configuration ! Veuillez réessayez plus tard...");

            }), function (response) {
                console.log(response);
                alert(reponse);
                DevExpress.ui.error("Erreur dans la sauvegarde de la configuration ! Veuillez réessayez plus tard...");
            };
        }
    };

    // TODO :: Lorsque l'utilisateur a fait des changements mais souhaite les annuler, il faudrait delete tous les enregistrements de la vue puis enregistrer ceux au départ lorsqu'il a chargé la vue 
    $scope.cancelButtonOptions = {
        text: "Annuler",
        type: "danger",
        width: 150,
        onItemClick: function (e) {
            $http({
                url: 'Api/UpdatePreferenceOfViewAll',
                method: 'GET',
                params: {
                    idView: $scope.IdViewSelected,
                    ListePrincipale: sharedProperties.getListeP(),
                    ListeSecondaire: sharedProperties.getListeS()
                }
            }).then(function (response) {
                console.log(response.data);
                console.log(response);
                if (response.data === "True") {
                    DevExpress.ui.notify("Configuration sauvegardé !");
                }
                else
                    DevExpress.ui.notify("Erreur dans la sauvegarde de la configuration ! Veuillez réessayez plus tard...");

            }), function (response) {
                console.log(response);
                alert(reponse);
                DevExpress.ui.error("Erreur dans la sauvegarde de la configuration ! Veuillez réessayez plus tard...");
            };
        }
    };




    // Affiche la liste des Views        TODO :: Ne montrer que les Vue où id_user is null / id_user est égal au sien
    $http({
        url: 'Api/GetViewList',
        method: 'GET'
    }).then(function (response) {
        $scope.result = response.data;
        //console.log($scope.result);

        $scope.listOfView = {
            items: $scope.result,
            showPopupTitle: false,
            closeOnOutsideClick: true,
            placeholder: "Sélectionner une vue",
            displayExpr: "ViewName",
            onItemClick: function (e) {
                console.log(e.itemData);
                $scope.toDisplayForView = true;
                $scope.ViewName = e.itemData.ViewName;
                $scope.ViewDesc = e.itemData.ViewDesc;
                $scope.IdViewSelected = e.itemData.ID_View;
            }
        };
        
    }), function (response) {
        console.log(response);
        alert(reponse);
    };

}



// COLOR BOX \\         INDEPENDANT DES VUES, LA COULEUR NE RENTRE PAS DANS LA CONFIG D'UNE VUE MAIS DANS LA PERSONNALISATION PERSONNELLE DE L'USER -> TAB_CustomSettingsValue
function customVisualisationColorbox($scope, $location, $localStorage) {

    $scope.$storage = $localStorage.$default({
        bool: false
    });

    console.log($scope.$storage.bool);
    var applyButton = "Valider";
    var cancelButton = "Annuler";

    $scope.colorBox = {
        Ligne: {
            value: "#f05b41",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "N° de Ligne",
            lib: "Ligne"
        },
        Colis: {
            value: "#ff9900",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "N° de Colis",
            lib: "Colis"
        },
        Pere: {
            value: "#ffee00",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Père (P)",
            lib: "Pere"
        },
        NomenclatureFils: {
            value: "#8cff00",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Nomenclature Fils (N)",
            lib: "NomenclatureFils"
        },
        Virtuelle: {
            value: "#00a627",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Virtuelle (V)",
            lib: "Virtuelle"
        },
        Usinage: {
            value: "#00ffcc",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Usinage (U)",
            lib: "Usinage"
        },
        EtapeUsi: {
            value: "#0004ff",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Etape Usinage (S)",
            lib: "EtapeUsi"
        },
        MatiereGen: {
            value: "#A2F6E8",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Matière générée (G)",
            lib: "MatiereGen"
        },
        IPM: {
            value: "#00028c",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Infos Processus Matière (I)",
            lib: "IPM"
        },
        Fabrication: {
            value: "#c400ff",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Fabrication (F)",
            lib: "Fabrication"
        },
        GammeOpe: {
            value: "#864899",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Gamme d'opération (O)",
            lib: "GammeOpe"
        },
        PDC: {
            value: "#f05b41",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Poste De Charge (W)",
            lib: "PDC"
        },
        InfosProcPDC: {
            value: "#f05b41",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Infos Processus PDC (I)",
            lib: "InfosProcPDC"
        },
        LigneColis: {
            value: "#f05b41",
            applyButtonText: applyButton,
            cancelButtonText: cancelButton,
            editAlphaChannel: $scope.$storage.bool,
            text: "Ligne colis (L)",
            lib: "LigneColis"
        }
    };

    var tmp; // For checkbox text
    if ($scope.$storage.bool) {
        tmp = "désactiver";
    } else tmp = "activer";

    // To enable "editAlphaChannel" for colorBox
    $scope.checkBox = {
        forAlphaChannel: {
            bindingOptions: {
                value: $scope.$storage.bool
            },
            text: "Cliquer pour " + tmp  + " la transparence",
            value: $scope.$storage.bool
        }
    };

    $scope.reload = function ($location) {        
        $scope.$storage.bool = !$scope.$storage.bool;
        console.log($scope.$storage.bool);
        location.replace('Custom/Visualisation');
    };
}



// LIST \\
function customVisualisationList($scope, $http, $controller, sharedProperties) {

    //TODO  :: Rafraîchir les données de la liste des types de lignes  + liste détail/arbo lorsque la sélection d'une des listes ( ligne ou table ) est changé...

    // Etendre le controller customeVisualisation pour accéder au même '$scope'
    //angular.extend(this, $controller('customVisualisation', { $scope: $scope }));

    $scope.selectAllMode = "allPages";
    $scope.selectionMode = "multiple";
    var firstTime = true;

    // Une fois une vue sélectionnée, on charge tous ses paramètres de départ dans le cas où l'utilisateur annule ses changements, on pourra revenir en arrière grâce à ce charegement
    GetPreferenceOfViewAll();


    // Affiche la liste des tables 
    $http({
        url: 'Api/GetTableList',
        method: 'GET'
    }).then(function (response) {
        $scope.resultTable = response.data;

        // List of Table
        $scope.lookupOptionsTable = {
            items: $scope.resultTable,
            showPopupTitle: false,
            closeOnOutsideClick: true,
            placeholder: "Sélectionner une table",
            displayExpr: "TableName",
            /*pullRefreshEnabled: true,
            onInitialized: function (e) {
                $scope.component = e.component;
            },*/
            onValueChanged: function (e) {
                $scope.SystemName = e.value.SystemName;
                $scope.LibraryName = e.value.LibraryName;
                $scope.TableName = e.value.TableName;

                $http({
                    url: 'Api/GetTypeLineOfTable',
                    method: 'GET',
                    params: {
                        tableName: $scope.TableName
                    }
                }).then(function (response) {
                    $scope.resultTypeLine = response.data;
                    // Widget for the List of Line type
                    $scope.lookupOptionsLine = {
                        dataSource: $scope.resultTypeLine,
                        showPopupTitle: false,
                        closeOnOutsideClick: true,
                        placeholder: "Sélectionner un type de ligne",
                        displayExpr: "TableSubLevelType",
                        onValueChanged: function (e) {
                            $scope.idLineType = e.value.ID_TableSubLevel;
                            GetPrimaryList();

                            if (!firstTime) { // Si c'est la première fois qu'on select un type de ligne, on update pas (car aucune sélection possible pouvant être faite auparavant)
                                $scope.previousIdSubLevel = e.previousValue.ID_TableSubLevel;
                                UpdatePreferenceOfView(); // Nécessaire d'enregistrer car les listes dépendent du type de ligne sélectionné
                            }
                            else { // Dans un 1er temps, on recoit juste les pref., sinon dans un 2ième on update d'abord, puis on recoit les pref. (GetPreference imbriqué dans UpdatePref)
                                GetPreferenceOfView();                                                       
                            }

                            $scope.toDisplay = true;
                            firstTime = false;
                        }
                    };
                }), function (response) {
                    console.log(response);
                    alert(reponse);
                };
            }
        };

    }), function (response) {
        console.log(response);
        alert(reponse);
    };


    // Widget contenant la liste des paramètres pour la zone d'arboresence
    $scope.listOptionsPrincipale = {
        height: 500,
        keyExpr: "key",
        bindingOptions: {
            selectionMode: "selectionMode",
            selectAllMode: "selectAllMode",
            dataSource: "primaryList",
            selectedItemKeys: "selectedItemsPrincipal"
        },
        showSelectionControls: true,
        searchEnabled: true,
        searchMode: "contains",
        searchExpr: ['ColumnName', 'ColumnDesc'],
        onItemClick: function (item) {
            sharedProperties.setListeP($scope.selectedItemsPrincipal);
            console.log(sharedProperties.getListeP());
        }
    };

    // Widget contenant la liste des paramètres pour la zone de détail
    $scope.listOptionsSecondaire = {
        height: 500,
        keyExpr: "key",
        bindingOptions: {
            selectionMode: "selectionMode",
            selectAllMode: "selectAllMode",
            dataSource: "primaryList",
            selectedItemKeys: "selectedItemsDetail"
        },
        showSelectionControls: true,
        searchEnabled: true,
        searchMode: "contains",
        searchExpr: ['ColumnName', 'ColumnDesc'],
        onItemClick: function (item) {
            sharedProperties.setListeS($scope.selectedItemsDetail);
            console.log(sharedProperties.getListeS());
        }
    };



    function GetPrimaryList() {
        $http({
            url: 'Api/GetPrimaryListOptions',
            method: 'GET',
            params: {
                system: $scope.SystemName,
                library: $scope.LibraryName,
                table: $scope.TableName,
                line: $scope.idLineType
            }
        }).then(function (response) {
            $scope.primaryList = response.data;

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    // Cette fonction prend les enregistrements concernant la vue en fonction du type de ligne sélectionné
    function GetPreferenceOfView() {
        $http({
            url: 'Api/GetPreferenceOfView',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                idSubLevel: $scope.idLineType
            }
        }).then(function (response) {
            var listeP = [];
            var listeS = [];
            var i = 0;
            while (i !== response.data.length) {
                if (response.data[i].DetailLevel === 0) {
                    listeP.push(response.data[i].key); // KEY = ID_Column + _ + ID_TableSubLevel
                }

                else {
                    listeS.push(response.data[i].key);
                }
                i++;
            }

            // Permet de créer une liste identifiant la colonne pour le type de ligne à pré-cocher lors de l'affichage des choix de zone de la vue
            $scope.selectedItemsPrincipal = listeP;
            $scope.selectedItemsDetail = listeS;
            sharedProperties.setListeP($scope.selectedItemsPrincipal);
            sharedProperties.setListeS($scope.selectedItemsDetail);
            console.log($scope.selectedItemsPrincipal);
            console.log($scope.selectedItemsDetail);

        }), function (response) {
            console.log(response);
        };
    }

    // Cette fonction prend tous les enregistrements concernant la vue pour une éventuelle remise à 0 (annulation des changements)
    function GetPreferenceOfViewAll() {
        $http({
            url: 'Api/GetPreferenceOfViewAll',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected
            }
        }).then(function (response) {
            var listeP = [];
            var listeS = [];
            var i = 0;
            while (i !== response.data.length) {
                if (response.data[i].DetailLevel === 0) {
                    listeP.push(response.data[i].key); // KEY = ID_Column + _ + ID_TableSubLevel
                }

                else {
                    listeS.push(response.data[i].key);
                }
                i++;
            }
            $scope.DefaultPrincipal = listeP;
            $scope.DefaultSecondary = listeS;
            console.log($scope.DefaultPrincipal);
            console.log($scope.DefaultSecondary);
        }), function (response) {
            console.log(response);
        };
    }

    function UpdatePreferenceOfView() {
        console.log(sharedProperties.getListeP());
        console.log(sharedProperties.getListeS());

        $http({
            url: 'Api/UpdatePreferenceOfView',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                idSubLevel: $scope.previousIdSubLevel,
                ListePrincipale: sharedProperties.getListeP(),
                ListeSecondaire: sharedProperties.getListeS()
            }
        }).then(function (response) {
            console.log(response.data);
            GetPreferenceOfView();

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    function UpdatePreferenceOfViewAll() {
        console.log(sharedProperties.getListeP());
        console.log(sharedProperties.getListeS());

        $http({
            url: 'Api/UpdatePreferenceOfViewAll',
            method: 'GET',
            params: {
                idView: $scope.IdViewSelected,
                ListePrincipale: sharedProperties.getListeP(),
                ListeSecondaire: sharedProperties.getListeS()
            }
        }).then(function (response) {
            console.log(response.data);

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }

    
    

}
