'use strict';
angular.module('BOMViewer')
    .controller('Menu', Menu)
    .controller('homeRecherche', homeRecherche)
    .controller('homeTreeView', homeTreeView)
    .controller('DefaultTreeView', DefaultTreeView);



// Injection des dépendances des contrôleurs
Menu.$inject = ['$scope', '$location'];
homeRecherche.$inject = ['$scope', '$http', '$window', 'localstorage', 'User'];
homeTreeView.$inject = ['$scope', '$http', '$window', 'localstorage', 'User'];
DefaultTreeView.$inject = ['$scope', '$http'];

// --- CONTROLLER PART ---\\
// MENU \\
function Menu ($scope, $location) {
    var showSubmenuModes = [{
        name: "onHover",
        delay: { show: 0, hide: 500 }
    }, {
        name: "onClick",
        delay: { show: 0, hide: 300 }
    }];

    $scope.showFirstSubmenuMode = showSubmenuModes[0];
    $scope.orientation = "horizontal";
    $scope.submenuDirection = "rightOrBottom";
    $scope.closeOnMouseLeave = true;

    $scope.menuOptions = {
        dataSource: menu,
        displayExpr: "name",
        onItemClick: function (data) {
            location.replace(data.itemData.url);
        },
        bindingOptions: {
            showFirstSubmenuMode: "showFirstSubmenuMode",
            orientation: "orientation",
            submenuDirection: "submenuDirection",
            hideSubmenuOnMouseLeave: "closeOnMouseLeave"
        }
    };
}

// FORM \\
function homeRecherche($scope, $http, $window, localstorage, User) {

    
    $scope.disableButton = true;

    $scope.Library = [
        { id: '1', Lib: 'GCFILELIB' },
        { id: '2', Lib: 'DCEXPLF' },
        { id: '3', Lib: 'HISTOTEC' }];

    $scope.Agency = [
        { id: '1', Age: '   ', Lib: 'FRA' },
        { id: '2', Age: '100', Lib: 'ALL' },
        { id: '3', Age: '200', Lib: 'ESP' }];

    $scope.reset = function () {
        $scope.selectedLibrary = angular.copy($scope.Library.Lib);
        $scope.Agency.Age = angular.copy();
        $scope.selectedOrder = angular.copy();
        $scope.selectedLine = angular.copy();
    };


    $scope.getNumberOrderVersion = function () {        
        $http({
            url: 'Api/GetNumberOrderVersion',
            method: 'GET',
            params: {
                OrderAgence: $scope.Agency.Age,
                OrderNumber: $scope.selectedOrder                
            }
        }).then(function (response) {            
            $scope.numberOrderVersion = response.data.length;
            $scope.allNumberOrderVersion = response.data;
            //console.log($scope.numberOrderVersion);
            //console.log($scope.allNumberOrderVersion);
            $scope.popup = true;
            $scope.withOrder = false;
            $scope.withoutOrder = false; 
            $scope.titleForPopUp = "Commande : " + $scope.selectedOrder;

            //WIDGET Pop-Up
            $scope.popupOptions = {
                width: 500,
                height: 300,
                showTitle: true,   
                closeOnOutsideClick: true,
                bindingOptions: {
                    visible: "popup",
                    title: "titleForPopUp"
                }
            };
            
            if ($scope.numberOrderVersion == 0) {
                $scope.withoutOrder = true; 
                $scope.forLoadIndicator = true; 
                $scope.withoutOrderMsg = "en cours...";
                $scope.CopyOrderFromAS400();
            }
            else {      
                $scope.allNumberOrderVersion.reverse();
                $scope.withOrder = true;
                
                // TODO :: Si une ligne spécifique est sélectionné d'une version, n'afficher que celle-ci
                console.log($scope.allNumberOrderVersion);
                //WIDGET List Version
                $scope.lookupOptionsVersion = {
                    bindingOptions: {
                        dataSource: "allNumberOrderVersion",
                        visible: "withOrder"
                    },
                    value: $scope.allNumberOrderVersion[0],
                    popupHeight: 700,
                    popupWidth: 250,
                    showPopupTitle: true,
                    closeOnOutsideClick: true,
                    placeholder: "Sélectionner un numéro de version",
                    displayExpr: "OrderVersion",
                    onInitialized: function () {
                        $scope.orderVersionSelected = $scope.allNumberOrderVersion[0].OrderVersion
                        //console.log($scope.orderVersionSelected)
                    },
                    onItemClick: function (item) {
                        $scope.orderVersionSelected = item.itemData.OrderVersion
                    }
                };

                //WIDGET Button
                $scope.versionButton = {
                    text: "Ok",
                    type: "success",
                    width: 170,
                    bindingOptions: {
                        visible: "withOrder"
                    },                   
                    onClick: function (e) {
                        $http({
                            url: 'Api/GetSpecifiedOrderVersion',
                            method: 'GET',
                            params: {
                                OrderAgence: $scope.Agency.Age,
                                OrderNumber: $scope.selectedOrder,
                                OrderVersion: $scope.orderVersionSelected,
                                ID_View: 3
                            }
                        }).then(function (response) {
                            $scope.IdOrderNumber = response.data;
                            //console.log($scope.IdOrderNumber);
                            $scope.SendToTreeView();
                        });
                    }
                };

                //WIDGET Button
                $scope.importButton = {
                    text: 'Importer à nouveau',
                    type: 'normal',
                    width: 170,
                    onClick: function (e) {
                        $scope.CopyOrderFromAS400();
                    }
                };

            }
        });
    };

    $scope.CopyOrderFromAS400 = function (e) {
        $http({
            url: 'Api/CopyOrderFromAS400',
            method: 'GET',
            params: {
                Library: $scope.selectedLibrary.Lib,
                Agency: $scope.Agency.Age,
                Order: $scope.selectedOrder,
                Line: $scope.selectedLine
            }
        }).then(function (response) {
            if (response.data === null) {
                alert("La recherche de la commande n'a pas abouti, retour : " + response.data);
            }
            else {                                
                $scope.import = true; // To display another texte on pop-up 
                $scope.forLoadIndicator = false; 
                $scope.withoutOrderMsg = "effectué !";
                $scope.IdOrderNumber = response.data;
                $scope.SendToTreeView();
            }
        }), function (response) {
                console.log(response);
                alert(reponse);
        };
    };

    //TODO :: A exécuter dans un service
    $scope.getUserColor = function (e) {
        $http({
            url: 'Api/GetUserColorSetting',
            method: 'GET',
            params: {
                ID_User: 2
            }
        }).then(function (response) {
            $scope.UserColorSetting = response.data;
            //console.log($scope.UserColorSetting);
            User.setColor($scope.UserColorSetting);

            $scope.colorValue = {
                Commande: User.getColor()[0].Color,
                Ligne: User.getColor()[1].Color,
                Pere: User.getColor()[2].Color,
                Fils: User.getColor()[3].Color,
                Virtuelle: User.getColor()[4].Color,
                Usinage: User.getColor()[5].Color,
                EtapeUsi: User.getColor()[6].Color,
                MatiereGen: User.getColor()[7].Color,
                IPM: User.getColor()[8].Color,
                Fabrication: User.getColor()[9].Color,
                GammeOpe: User.getColor()[10].Color,
                PDC: User.getColor()[11].Color,
                InfpsProcPDC: User.getColor()[12].Color,
                LigneColis: User.getColor()[13].Color
            };

            localstorage.setObject('colorValue', $scope.colorValue);
            //console.log(localstorage.getObject('colorValue', "marche pas"));

        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    };

    $scope.SendToTreeView = function (e) {      
        var TreeViewPage = window.open("Home/Treeview");
        TreeViewPage.IdOrderNumber = $scope.IdOrderNumber;
        TreeViewPage.selectedOrder = $scope.selectedOrder;
        TreeViewPage.Library = $scope.selectedLibrary.Lib;
        TreeViewPage.Agency = $scope.Agency.Lib;
        TreeViewPage.Line = $scope.selectedLine;

    }
    
}


// DEVEXPRESS TREEVIEW \\
function homeTreeView($scope,  $http, $window, localstorage, User) {  

    $scope.IdOrderNumber = window.IdOrderNumber;
    $scope.Order = window.selectedOrder;
    $scope.Library = window.Library;
    $scope.Agency = window.Agency;
    $scope.Line = window.Line;
    console.log($scope.Agency);
    
    $scope.colorValue = localstorage.getObject('colorValue', "Aucune donnée transmise (colorValue)");
    //console.log($scope.colorValue);


    $scope.toolTipOfNodeText = "";
    $scope.toolTipElement = "";


    $http({
        url: 'Api/GetCustomJsonOrder',
        method: 'GET',
        params: {
            idOrder: $scope.IdOrderNumber,
            idView: 3
        }
    }).then(function (response) {
        $scope.jsonOrder = response.data;
        //console.log($scope.jsonOrder);

        //WIDGET TreeView
        $scope.treeView = {
            items: $scope.jsonOrder,
            dataStructure: "plain",
            parentIdExpr: "IdTreeviewParent",
            keyExpr: "IdTreeview",
            displayExpr: "NodeText",
            onItemRendered: function (e) {

                //To change the color with the user setting
                e.itemElement.css('color', e.itemData.TypeLine === 'C' ? $scope.colorValue.Commande : e.itemData.TypeLine === 'A' ? $scope.colorValue.Ligne : 'red');

                //To find the text for tooltip with the mouse hover it
                e.element
                    .find(".dx-treeview-item")
                    .on("mouseover", function (e) {
                        $scope.hideToolTip = false;
                        var data = $(e.currentTarget).data().dxTreeviewItemData;
                        $scope.toolTipOfNodeText = data.NodeToolTip;
                        //console.log(e.element);
                    });
            },
            onItemClick: function (node) {
                $scope.nodeData = node.itemData;
                console.log($scope.nodeData);

                $http({
                    url: 'Api/GetDetailLineData',
                    method: 'GET',
                    params: {
                        TableName: $scope.nodeData.TableName,
                        JsonField: $scope.nodeData.JsonRawData
                    }
                }).then(function (response) {
                    //console.log(response.data);                    
                    $scope.DetailLineData = response.data[0];

                }), function (response) {
                    console.log(response);
                    alert(reponse);
                };

            }
        };

        //WIDGET ToolTip for node
        $scope.toolTip = {                      
            target: '.dx-state-hover', //DOM class
            showEvent: {
                name: 'dxpointerenter dxhoverstart',
                delay: 200
            },
            hideEvent: {
                name: 'dxpointerout dxpointerleave',
                delay: 50
            },
            position: 'bottom'          
        };

    }), function (response) {
        console.log(response);
        alert(reponse);
        };


    $scope.zoneDetail = {
        width: 500,
        height: 220,
        minHeight: 220,
        maxHeight: 220,
        minWidth: 100,
        maxWidth: 1000,
        handles: "left"
    };
}



function DefaultTreeView($scope) {
    console.log(defaultTreeView);

    $scope.treeViewOptions = {
        items: defaultTreeView,
        dataStructure: "plain",
        parentIdExpr: "ID_CpBOM_Parent",
        keyExpr: "ID_ComponentBOM",
        displayExpr: "CpBOMType",

        onItemRendered: function (e) {
            e.itemElement.css('color', e.itemData.CpBOMType === 'P' ? 'blue' : e.itemData.CpBOMType === 'N' ? 'red' : 'cyan');
        }        
        /*,onItemClick: function (e) {
            e.itemElement.css('background-color', e.itemData.CpBOMType === 'P' ? 'grey' : e.itemData.CpBOMType === 'N' ? 'green' : 'black');            
        }*/
    };
}
