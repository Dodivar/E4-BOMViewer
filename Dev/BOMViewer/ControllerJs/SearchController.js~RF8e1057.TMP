'use strict';
angular.module('BOMViewer')
    .controller('searchRecherche', searchRecherche)
    .controller('searchTreeView', searchTreeView)
    .controller('DefaultTreeView', DefaultTreeView);



// Injection des dépendances des contrôleurs
searchRecherche.$inject = ['$scope', '$http', '$window', 'localstorage', 'User'];
searchTreeView.$inject = ['$scope', '$http', '$window', 'localstorage', 'User'];
DefaultTreeView.$inject = ['$scope', '$http'];


// FORM \\
function searchRecherche($scope, $http, $window, localstorage, User) {

    var Agency = [
        { id: '1', Age: '   ', Lib: 'FRA' },
        { id: '2', Age: '100', Lib: 'ALL' },
        { id: '3', Age: '200', Lib: 'ESP' }];

    var Library = [
        { id: '1', Lib: 'GCFILELIB' },
        { id: '2', Lib: 'DCEXPLF' },
        { id: '3', Lib: 'HISTOTEC' }];

    $scope.disableButton = true;
    $scope.selectedAgency = Agency[0]; // default agency is selected on FRA    
    $scope.selectedLibrary = Library[0];

    $http({
        url: 'Api/GetLastOrderDisplayed',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        $scope.lastOrderView = response.data[0];
        console.log($scope.lastOrderView);

    }), function (response) {
        console.log(response);
        alert(reponse);
    };

    // WIDGET Radio group button
    $scope.radioGroupAgency = {
        items: Agency,
        bindingOptions: {
            value: "selectedAgency"
        },            
        displayExpr: "Lib",
        layout: "horizontal"
    };

    // WIDGET Radio group button
    $scope.radioGroupLibrary = {
        items: Library,         
        bindingOptions: {
            value: "selectedLibrary"
        },      
        displayExpr: "Lib",
        layout: "horizontal"
    };

    // WIDGET Text box for order
    $scope.textBoxOrder = {
        placeholder: "N° de commande",
        showClearButton: true,
        mask: "000000000",
        showMaskMode: "onFocus",
        maskInvalidMessage: "Format du N° de commande invalide",
        maxLength: 9,
        onEnterKey: function (e) {
            getNumberOrderVersion($scope.selectedAgency.Age, $scope.selectedOrder);
        } 
        
    };

    // WIDGET Text box for line
    $scope.textBoxLine = {
        placeholder: "N° de ligne",
        showClearButton: true,
        mask: "0000",
        showMaskMode: "onFocus",
        maskInvalidMessage: "Format du N° de ligne invalide"
    };

    // WIDGET Bouton success
    $scope.applyButtonOptions = {
        bindingOptions: {
          //  disabled: "disableButton"
        },   
        text: "Rechercher",
        type: "success",
        width: 200,
        accessKey: "Enter",
        onClick: function (e) {
            getNumberOrderVersion($scope.selectedAgency.Age, $scope.selectedOrder);
        }
    };

    // WIDEGT For last Order display in button
    $scope.orderButtonOptions = {
        bindingOptions: {
            text: 'lastOrderView.OrderNumber'
        },
        type: "default",
        width: 200,
        onClick: function (e) {
            getNumberOrderVersion($scope.lastOrderView.OrderAgence, $scope.lastOrderView.OrderNumber);
        }
    };

     // WIDGET Bouton cancel
    $scope.cancelButtonOptions = {
        text: "Annuler",
        type: "danger",
        width: 150,
        onClick: function (e) {
            reset();
        }
    };


    var reset = function () {
        $scope.selectedOrder = angular.copy('');
        $scope.selectedLine = angular.copy('');
    };


    var getNumberOrderVersion = function (agence, selectedOrder) {        
        $http({
            url: 'Api/GetNumberOrderVersion',
            method: 'GET',
            params: {
                OrderAgence: agence,  //$scope.selectedAgency.Age,
                OrderNumber: selectedOrder              
            }
        }).then(function (response) {            
            $scope.numberOrderVersion = response.data.length;
            $scope.allNumberOrderVersion = response.data;
            //console.log($scope.numberOrderVersion);
            //console.log($scope.allNumberOrderVersion);
            $scope.popup = true;
            $scope.withOrder = false;
            $scope.withoutOrder = false; 
            $scope.titleForPopUp = "Commande : " + $scope.selectedOrder;

            //WIDGET Pop-Up
            $scope.popupOptions = {
                width: 500,
                height: 300,
                showTitle: true,   
                closeOnOutsideClick: true,
                bindingOptions: {
                    visible: "popup",
                    title: "titleForPopUp"
                }
            };
            
            if ($scope.numberOrderVersion == 0) {
                $scope.withoutOrder = true; 
                $scope.forLoadIndicator = true; 
                $scope.withoutOrderMsg = "en cours...";
                $scope.CopyOrderFromAS400();
            }
            else {      
                $scope.allNumberOrderVersion.reverse();
                $scope.withOrder = true;
                                
                //console.log($scope.allNumberOrderVersion);


                // TODO :: Si une ligne spécifique est sélectionné d'une version, n'afficher que celle-ci

                //WIDGET List Version
                $scope.lookupOptionsVersion = {
                    bindingOptions: {
                        dataSource: "allNumberOrderVersion",
                        visible: "withOrder"
                    },
                    value: $scope.allNumberOrderVersion[0],
                    popupHeight: 700,
                    popupWidth: 250,
                    showPopupTitle: true,
                    closeOnOutsideClick: true,
                    placeholder: "Sélectionner un numéro de version",
                    displayExpr: "OrderVersion",
                    onInitialized: function () {
                        $scope.orderVersionSelected = $scope.allNumberOrderVersion[0].OrderVersion
                        //console.log($scope.orderVersionSelected)
                    },
                    onItemClick: function (item) {
                        $scope.orderVersionSelected = item.itemData.OrderVersion
                    }
                };

                //WIDGET Button
                $scope.versionButton = {
                    text: "Ok",
                    type: "success",
                    width: 170,
                    bindingOptions: {
                        visible: "withOrder"
                    },                   
                    onClick: function (e) {
                        $http({
                            url: 'Api/GetSpecifiedOrderVersion',
                            method: 'GET',
                            params: {
                                OrderAgence: $scope.selectedAgency.Age,
                                OrderNumber: $scope.selectedOrder,
                                OrderVersion: $scope.orderVersionSelected,
                                ID_View: 3
                            }
                        }).then(function (response) {
                            $scope.IdOrderNumber = response.data;
                            //console.log($scope.IdOrderNumber);
                            $scope.SendToTreeView();
                        });
                    }
                };

                //WIDGET Button
                $scope.importButton = {
                    text: 'Importer à nouveau',
                    type: 'normal',
                    width: 170,
                    onClick: function (e) {
                        $scope.CopyOrderFromAS400();
                    }
                };

            }
        });
    };

    $scope.CopyOrderFromAS400 = function (e) {
        $http({
            url: 'Api/CopyOrderFromAS400',
            method: 'GET',
            params: {
                Library: $scope.selectedLibrary.Lib,
                Agency: $scope.selectedAgency.Age,
                Order: $scope.selectedOrder,
                Line: $scope.selectedLine
            }
        }).then(function (response) {
            if (response.data === null) {
                alert("La recherche de la commande n'a pas abouti, retour : " + response.data);
            }
            else {                                
                $scope.import = true; // To display another texte on pop-up 
                $scope.forLoadIndicator = false; 
                $scope.withoutOrderMsg = "effectué !";
                $scope.IdOrderNumber = response.data;
                $scope.SendToTreeView();
            }
        }), function (response) {
                console.log(response);
                alert(reponse);
        };
    };
    

    $scope.updateLastOrderDisplay = function (OrderNumber, OrderAgence) {
        $http({
            url: 'Api/UpdateLastOrderDisplayed',
            method: 'GET',
            params: {
                ID_User: User.getID_User(),
                ID_Order: OrderNumber,
                OrderAgence: OrderAgence

            }
        }).then(function (response) {
            console.log(response.data);
        }), function (response) {
            console.log(response);
            alert(reponse);
        };
    }


    $scope.SendToTreeView = function (e) {      
        User.getColor(User.getID_User()); // On charge les préférences couleurs

        var TreeViewPage = window.open("Search/Treeview");
        TreeViewPage.IdOrderNumber = $scope.IdOrderNumber;
        TreeViewPage.selectedOrder = $scope.selectedOrder;
        TreeViewPage.Library = $scope.selectedLibrary.Lib;
        TreeViewPage.Agency = $scope.selectedAgency.Lib;
        TreeViewPage.Line = $scope.selectedLine;   

        //On enregistre la dernière commande recherchée
        $scope.updateLastOrderDisplay($scope.selectedOrder);
    }
    
}


// DEVEXPRESS TREEVIEW \\
function searchTreeView($scope,  $http, $window, localstorage, User) {  

    $scope.IdOrderNumber = window.IdOrderNumber;
    $scope.Order = window.selectedOrder;
    $scope.Library = window.Library;
    $scope.Agency = window.Agency;
    $scope.Line = window.Line;

    // On stock les préférences couleurs
    var colorObj = localstorage.getObject('colorValue', "colorValue erreur");
    //console.log(colorObj);

    $scope.TVerror = "";
    $scope.treeviewClickItem = false;
    $scope.toolTipOfNodeText = "";
    $scope.toolTipElement = "";
    $scope.TreeViewOptionsPrincipaleInstance;

    $scope.loadingIndicator = true;

    $scope.fontSizeTreeView = 14;
    $scope.toolTipActive = true;


    // To know if the user want to see deleted lines
    $http({
        url: 'Api/GetSettingDisplayDeletedLine',
        method: 'GET',
        params: {
            ID_User: User.getID_User()
        }
    }).then(function (response) {
        var result = response.data[0].CustomSettingValue;
        //console.log(result);
        if (result == 1)
            $scope.displayDeletedLine = true
        else
            $scope.displayDeletedLine = false

    }), function (response) {
        console.log(response);
        alert(reponse);
        };


    $scope.checkBoxToolTip = {
        bindingOptions: {
            value: 'toolTipActive'
        },
        text: "Afficher l'info-bulle"
    }

    // select to control the size of the font in the TreeView
    $scope.sizeFontTreeView = {
        bindingOptions: {
            value: "fontSizeTreeView",
        },
        min: 10,
        max: 20,
        showSpinButtons: true
    };




    $http({
        url: 'Api/GetCustomJsonOrder',
        method: 'GET',
        params: {
            ID_Order: $scope.IdOrderNumber,
            ID_View: User.getID_View(User.getID_User())
        }
    }).then(function (response) {
        $scope.jsonOrder = response.data;
        //console.log($scope.jsonOrder);

        $scope.loadingIndicator = false;

        // Si aucune donnée n'est chargée
        if ($scope.jsonOrder.length === 0) {
            DevExpress.ui.notify('Aucune donnée chargée ! Erreur possible : Aucune colonne n\'est cochée dans votre vue pour la zone du treeview', "error", 10000);
            $scope.TVerror = "Erreur lors du chargement de la commande ! Aucune donnée n'a pu être obtenue.";
        }

        //WIDGET TreeView
        $scope.treeView = {
            items: $scope.jsonOrder,
            dataStructure: "plain",
            parentIdExpr: "IdTreeviewParent",
            keyExpr: "IdTreeview",
            displayExpr: "NodeText",
            noDataText: "",
            onContentReady: function (e) {
                console.log(e);
                $scope.TreeViewOptionsPrincipaleInstance = e.element;     
                console.log($scope.TreeViewOptionsPrincipaleInstance[0].style.fontSize);
            },
            onItemExpanded: function (e) {
                // To put a vertical line to see where the node expanded is finish
                console.log(e);
            },
            onItemRendered: function (e) {
                //console.log(e);

                // Expand the first node (Order)
                if (e.itemIndex === 1) {
                    e.node.internalFields.expanded = true;
                }

                //To change the size of each line                
                //e.itemElement[0].style.fontSize = "14px";
                e.itemElement[0].style.margin = "-6px 0px 0px 0px"; // - ici
                e.itemElement[0].style.padding = "0px 0px 0px 3px";
                e.itemElement[0].style.lineHeight = "25px";

                // To see or not the deleted lines
                if ($scope.displayDeletedLine) {
                    $scope.LineJsonData = angular.fromJson(e.itemData.JsonRawData);

                    /*
                    if ($scope.LineJsonData[0].ATAT === "*") {                       
                        e.itemElement[0].hidden = true;
                    }
                    */
                    var afterATAT = 'ATAT":"'.length;
                    var toFind = e.itemData.JsonRawData.indexOf('ATAT') + afterATAT;

                    if (e.itemData.JsonRawData.charAt(toFind) === '*') {
                        e.itemElement[0].hidden = true;
                    }
                }

                //To change the color with the user setting
                e.itemElement.css('color',
                    e.itemData.TypeLine === 'C' ? colorObj.Commande : e.itemData.TypeLine === 'A' ? colorObj.Ligne : e.itemData.TypeLine === 'O' ? colorObj.GammeOpe :
                    e.itemData.TypeLine === 'P' ? colorObj.Pere : e.itemData.TypeLine === 'N' ? colorObj.Fils : e.itemData.TypeLine === 'V' ? colorObj.Virtuelle : e.itemData.TypeLine === 'U' ? colorObj.Usinage :
                    e.itemData.TypeLine === 'S' ? colorObj.EtapeUsi : e.itemData.TypeLine === 'G' ? colorObj.MatiereGen : e.itemData.TypeLine === 'I' ? colorObj.IPM : e.itemData.TypeLine === 'F' ? colorObj.Fabrication :
                    e.itemData.TypeLine === 'W' ? colorObj.PDC : "black");

                //To find the text for tooltip with the mouse hover it
                e.element
                    .find(".dx-treeview-item")
                    .on("mouseover", function (e) {              

                        var data = $(e.currentTarget).data().dxTreeviewItemData;
                        $scope.toolTipOfNodeText = data.NodeToolTip;
                        
                        var element = document.getElementById('toolTipText')
                        if (element != null) {
                            element.innerHTML = $scope.toolTipOfNodeText;
                            $scope.hideToolTip = false;
                        }
                    });
            },            
            onItemClick: function (node) {

                //Récupération des données pour la zone détail
                $scope.nodeData = node.itemData;
                //console.log($scope.nodeData);

                $http({
                    url: 'Api/GetDetailLineData',
                    method: 'GET',
                    params: {
                        ID_View: User.getID_View(User.getID_User()),
                        TableSubLevelType: $scope.nodeData.TypeLine,
                        TableName: $scope.nodeData.TableName,
                        JsonField: $scope.nodeData.JsonRawData
                    }
                }).then(function (response) {                         
                    //console.log(response.data);                    
                    $scope.detailLineData = response.data[0].DetailText  

                    // To add <br> (need to pass the text by html and not by string)
                    var element = document.getElementById('zone-detail-text')      
                    if (element != null) {
                        element.innerHTML = $scope.detailLineData
                    }       
                                                       
                }), function (response) {
                    console.log(response);
                    alert(reponse);
                };

                $scope.treeviewClickItem = true;
            }
        };


        // Click anywhere To disable the detail view
        $(window).click(function (e) {
            console.log(e.target);
            if ($scope.doNotDisplayDetail(e)) {
                $scope.treeviewClickItem = false;
                $scope.$apply();
            }                
            
        });

        $scope.doNotDisplayDetail = function (e) {
            var result = false;
            //e.target.className === "" || !e.target.className.startsWith("dx")
                //||  || btnFontSize
            if (!e.target.className.startsWith("zone-detail")) {
                result = true;
            }
            return result;
        }
        


        //WIDGET ToolTip for node
        $scope.toolTip = {                      
            target: 'div.dx-item.dx-treeview-item.dx-state-hover', //DOM class .dx-treeview-item .dx-state-hover
            position: 'bottom',
            bindingOptions: {
                visible: $scope.toolTipActive
            },             
            showEvent: {
                //name: 'dxpointerenter dxhoverstart',                
                name: 'dxpointerover'             
            },
            hideEvent: {
                name: 'dxpointerout dxpointerleave',
            },
            animation: {
                show: {
                    type: "pop",
                    from: {
                        scale: 0.1,
                        opacity: 0
                    },
                    to: {
                        opacity: 1,
                        scale: 1
                    }
                },
                hide: {
                    type: "pop",
                    from: {
                        scale: 1,
                        opacity: 1
                    },
                    to: {
                        scale: 0.1,
                        opacity: 0
                    }
                }
            }        
        };

    }), function (response) {
        console.log(response);
        alert(reponse);
        };


    
    $scope.zoneDetail = {
        handles: "left"
        // Options taille dans le style.CSS

        /*,onResizeStart: function (e) {
            console.log(e);       
            console.log(e.element[0].style.right);
        },
        onResize: function (e) {
            console.log(e.element[0].style.right);
            console.log(e.element[0].style.width);
            e.element[0].style.paddingRight = e.element[0].style.width;
        },
        onResizeEnd: function (e) {     
            console.log(e);
            e.element[0].style.paddingRight = '20px';
            console.log(e.element[0].style.paddingRight);

        }*/
    };

    $scope.zoneScroll = {
        scrollByContent: true,
        scrollByThumb: true,
        reachBottomText: 'Chargement...',
        showScrollbar: 'onHover',
        bounceEnabled: false,
        scrollByContent: false
    }

    $scope.increaseFont = function () {
        if ($scope.fontSize != 30) {
            $scope.fontSize = $scope.fontSize + 1
        }
    }

    $scope.decreaseFont = function () {
        if ($scope.fontSize != 3) {
            $scope.fontSize = $scope.fontSize - 1
        }
    }
}



function DefaultTreeView($scope) {
    console.log(defaultTreeView);

    $scope.treeViewOptions = {
        items: defaultTreeView,
        dataStructure: "plain",
        parentIdExpr: "ID_CpBOM_Parent",
        keyExpr: "ID_ComponentBOM",
        displayExpr: "CpBOMType",

        onItemRendered: function (e) {
            e.itemElement.css('color', e.itemData.CpBOMType === 'P' ? 'blue' : e.itemData.CpBOMType === 'N' ? 'red' : 'cyan');
        }        
        /*,onItemClick: function (e) {
            e.itemElement.css('background-color', e.itemData.CpBOMType === 'P' ? 'grey' : e.itemData.CpBOMType === 'N' ? 'green' : 'black');            
        }*/
    };
}
